"use strict";var AgGrid=React.createClass({displayName:"AgGrid",getInitialState:function(){var i=[],t,n;for(!this.props.headerCheckBox||i.push({headerName:"",field:"",width:28,editable:!1,checkboxSelection:!0,headerCheckboxSelection:!0}),t=0;t<this.props.columnDefs.length;t++)n={},n.headerName=this.props.columnDefs[t].headerName,n.field=this.props.columnDefs[t].field,n.width=parseInt(this.props.columnDefs[t].width),n.editable=this.props.columnDefs[t].editable,this.props.columnDefs[t].type==="number"&&(n.filter="number",n.cellEditor=this.Number),this.props.columnDefs[t].type==="checkbox"&&(n.editable=!1,n.cellRenderer=this.CellRenderCheckbox,n.cellStyle={display:"flex","align-items":"center",justifyContent:"center"}),this.props.columnDefs[t].type==="date"&&(n.cellFormatter=this.Datepicker),this.props.columnDefs[t].type==="datetime"&&(n.cellFormatter=this.Datetimepicker),this.props.columnDefs[t].type==="option"&&(n.select=this.props.columnDefs[t].select,n.cellRenderer=this.CellRenderSelect,n.cellStyle={display:"flex","align-items":"center",justifyContent:"center"},n.valueType=this.props.columnDefs[t].valueType),this.props.columnDefs[t].type==="button"&&(n.button=this.props.columnDefs[t].button,n.cellRenderer=this.CellRenderButton,n.cellStyle={display:"flex","align-items":"center",justifyContent:"center"}),i.push(n);return{data:null,dataCopy:null,gridOptions:null,columnDefs:i,editList:[],removeList:[],newList:[]}},CellRenderCheckbox:function(n){var t=document.createElement("input");return t.type="checkbox",t.checked=n.value,t.addEventListener("click",function(){n.node.data[n.colDef.field]=t.checked?1:0;this.state.gridOptions.api.refreshRows(n.note);this.Change(n.node.data)}.bind(this)),t},onCellClickedCheckbox:function(n){n.node.data[n.colDef.field]=!n.node.data[n.colDef.field];n.node.data[n.colDef.field]=n.node.data[n.colDef.field]?1:0;this.state.gridOptions.api.refreshRows(n.note)},CellRenderSelect:function(n){for(var r,t=document.createElement("select"),i=0;i<n.colDef.select.length;i++)r=document.createElement("option"),r.text=n.colDef.select[i].text,r.value=n.colDef.select[i].value,t.appendChild(r);return t.value=n.value,t.addEventListener("change",function(){n.colDef.valueType==="int"&&(n.node.data[n.colDef.field]=parseInt(t.value));n.colDef.valueType==="float"&&(n.node.data[n.colDef.field]=parseFloat(t.value));n.colDef.valueType===null&&(n.node.data[n.colDef.field]=t.value);this.state.gridOptions.api.refreshRows(n.note);this.Change(n.node.data)}.bind(this)),t},CellRenderButton:function(n){var i=this,t=document.createElement("button");return t.className=n.colDef.button.className,t.innerText=n.colDef.button.text,t.style.color="white",t.style.backgroundColor="#3447ca",t.addEventListener("click",function(){return i.onClickForButton(t.className,n.data)}),t},onClickForButton:function(n,t){var i,r,u;n==="createHall"&&(i=t.CODE,$.ajax({url:"/ExamHallStudent/CreateExamHallStudent",dataType:"json",data:{examTimeCode:i},success:function(){log.show("Tạo phòng thành công!",!0)}.bind(this),error:function(n,t,i){log.show("Tạo phòng lỗi!",!1);console.log(i.toString())}}));n==="createExamform"&&(i=t.CODE,r=t.TESTSTRUCTCODE,u=$("#PARENTCODE").val(),$.ajax({url:"/ExamForm/createExamForm",dataType:"json",data:{examTimeCode:i,testStructCode:r,subjectCode:u},success:function(n){n.ret>=0?log.show("Tạo đề thành công!",!0):log.show("Tạo đề lỗi!",!1)}.bind(this),error:function(n,t,i){log.show("Tạo đề lỗi!",!1);console.log(i.toString())}.bind(this)}));n==="ViewMark"&&$.ajax({url:"/ExamResult/GetResult",dataType:"json",data:{markcode:t.MARKCODE,coursecode:t.COURSECODE},success:function(n){if(!!n.data){var t=n.data,i=component.get("popupmark");i.setState({liExam:t});$("#ModalMark").modal("show")}}.bind(this),error:function(n,t,i){console.log(i.toString())}.bind(this)})},Number:function(){this.init=function(n){this.eInput=document.createElement("INPUT");this.eInput.setAttribute("type","number");this.eInput.value=n.value!=null?n.value:0};this.getGui=function(){return this.eInput};this.afterGuiAttached=function(){this.eInput.focus();this.eInput.select()};this.getValue=function(){return parseInt(this.eInput.value)}},Datepicker:function(n){return moment(n.value).format("DD/MM/YYYY")},Datetimepicker:function(n){return moment(n.value).format("DD/MM/YYYY HH:mm")},myTabToNextCell:function(n){var i=n.previousCellDef,r=i.rowIndex,t=n.backwards?r+1:r-1,u=this.state.gridOptions.api.getModel().getRowCount();return t<0&&(t=0),t>=u&&(t=u-1),{rowIndex:t,column:i.column,floating:i.floating}},myNavigateToNextCell:function(n){var t=n.previousCellDef,u=n.nextCellDef,i,r;switch(n.key){case 38:if(this.state.objectChange!=null)break;return(i=t.rowIndex-1,i<0)?null:{rowIndex:i,column:t.column,floating:t.floating};case 40:return this.state.objectChange!=null?void 0:(i=t.rowIndex+1,r=this.state.gridOptions.api.getModel().getRowCount(),i>=r?null:{rowIndex:i,column:t.column,floating:t.floating});case 37:case 39:return u;default:throw"this will never happen, navigation is always on of the 4 keys above";}},onSelectionChanged:function(){var n=this.state.gridOptions.api.getSelectedRows()},Comparator:function(n,t){if(n===null)return!1;for(var i=0;i<Object.keys(n).length;i++)if(n[Object.keys(n)[i]]!=t[Object.keys(n)[i]])return!1;return!0},Exist:function(n,t){if(n===null)return!1;for(var i=0;i<n.length;i++)if(t.agGridID===n[i].agGridID)return!0;return!1},Change:function(n){var i=JSON.parse(JSON.stringify(n)),t;delete i.agGridID;this.Exist(this.state.editList,n)||this.Comparator(this.state.dataCopy[n.agGridID],i)?(this.Comparator(this.state.dataCopy[n.agGridID],i)||1)&&(t=this.state.editList,t.splice(t.indexOf(n),1),this.setState({editList:t})):(t=this.state.editList,t.push(n),this.setState({editList:t}))},IsChange:function(){return this.state.editList.length!=0||this.state.removeList.length||this.state.newList.length?!0:!1},componentWillMount:function(){this.setState({gridOptions:{columnDefs:this.state.columnDefs,rowData:null,rowSelection:"multiple",suppressRowClickSelection:!1,onSelectionChanged:this.onSelectionChanged,enableColResize:!0,enableFilter:!0,headerHeight:30,rowHeight:28,enableSorting:!0,animateRows:!0,navigateToNextCell:this.myNavigateToNextCell,tabToNextCell:this.myTabToNextCell,onGridReady:function(){},onCellEditingStarted:function(){}.bind(this),onCellEditingStopped:function(){},onRowSelected:function(){var n=this.state.gridOptions.api.getSelectedRows()}.bind(this),onCellValueChanged:function(n){this.Change(n.data)}.bind(this),onSelectionChanged:function(){var n=this.state.gridOptions.api.getSelectedRows();this.props.onRowSelect(n)}.bind(this)}})},componentDidMount:function(){this.props.initAgGrid(this.setRowData,this.getDataChange,this.setNextRow,this.setPrevRow);var n=this.state.gridOptions,t=document.querySelector("#"+this.props.container);new agGrid.Grid(t,n);this.state.gridOptions=n;this.fitToContainer();$("#"+this.props.container).keyup(function(n){var t,i;n.keyCode===46&&(t=this.state.gridOptions.api.getSelectedNodes(),t!=null&&(this.state.gridOptions.api.removeItems(t),this.state.gridOptions.api.refreshView(),i=this.state.removeList,t.forEach(function(n){i.push(n.data.agGridID)}.bind(this)),this.setState({removeList:i})))}.bind(this))},componentDidUpdate:function(){this.fitToContainer()},fitToContainer:function(){var r=document.querySelector("#"+this.props.container),n=this.state.gridOptions,t=this.state.columnDefs,i=0;t.forEach(function(n){i+=n.width});setTimeout(function(){var r=$("#"+this.props.container).width();t.forEach(function(t){var u=n.columnApi.getColumn(t.field);n.columnApi.setColumnWidth(u,Math.floor(t.width/i*r))})}.bind(this),200)},Refresh:function(n){var i,r,t;if(n!=null){for(i=JSON.parse(JSON.stringify(n)),this.setState({dataCopy:i}),r=n.length,t=0;t<r;t++)n[t].agGridID=t;this.state.gridOptions.api.setRowData(n);this.state.gridOptions.api.refreshView()}this.setState({dataCopy:i,removeList:[],newList:[],editList:[]})},setRowData:function(n){var i,r,t;if(n!=null){for(i=JSON.parse(JSON.stringify(n)),this.setState({dataCopy:i}),r=n.length,t=0;t<r;t++)n[t].agGridID=t;this.state.gridOptions.api.setRowData(n);this.state.gridOptions.api.refreshView();this.setState({dataCopy:i,removeList:[],newList:[],editList:[]});this.state.gridOptions.api.forEachNode(function(n){if(n.childIndex===0){n.setSelected(!0);return}});this.fitToContainer()}else console.log(" ***** data null .....!")},getDataChange:function(){var t={},n;for(t.edit=this.state.editList,n=0;n<this.state.editList.length;n++)delete t.edit[n].agGridID;for(t["delete"]=this.state.removeList,n=0;n<this.state.removeList.length;n++)delete t["delete"][n].agGridID;return t},setNextRow:function(n){var t=this,i;n?function(){var r=!1,u=!1;i={};t.state.gridOptions.api.deselectAll();t.state.gridOptions.api.forEachNode(function(t){if(!r&&(t.rowIndex!==0||(i=t,n))){if(u){t.setSelected(!0);r=!0;return}t.data.agGridID===n.agGridID&&(u=!0)}}.bind(t));!r&&u&&i.setSelected(!0)}():function(){var n=!1;t.state.gridOptions.api.forEachNode(function(t){n||(this.state.gridOptions.api.deselectAll(),t.setSelected(!0),n=!0)}.bind(t))}()},setPrevRow:function(n){var r=this;if(n){var t=null,i=!1,u=!1;this.state.gridOptions.api.deselectAll();this.state.gridOptions.api.forEachNode(function(r){if(r.rowIndex===0)r.data.agGridID===n.agGridID&&(i=!0);else if(!i&&r.data.agGridID===n.agGridID&&!u){t.setSelected(!0);u=!0;return}t=r}.bind(this));i&&t.setSelected(!0)}else(function(){var n=!1;r.state.gridOptions.api.forEachNode(function(t){n||(this.state.gridOptions.api.deselectAll(),t.setSelected(!0),n=!0)}.bind(r))})()},render:function(){return React.createElement("div",null)}});