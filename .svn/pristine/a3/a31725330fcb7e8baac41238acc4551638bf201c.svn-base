/**
 * Quy tắc đặt tên
 *Cung cấp ra ngoài các hàm: 
 * ClearInput(obj): Xóa các text box - được gọi từ cha
 * SetInput(obj): Thiết lập thông tin trên các ô text tương ứng - được gọi từ cha
 * ReloadData(): callback function được gán từ cha vào để cập nhật lại thông tin của cha nếu cần thiết
 */
var StaffPopup = React.createClass({
    componentWillMount: function () {
        //Load các thông tin về danh mục các thứ khác nếu cần hiết
    },
    componentDidMount: function () {
    },
    /**
    *hàm được gọi để xóa dữ liệu trên form cho phép thêm mới; được gọi bởi component có component này (list)
    */
    ClearInput:function(obj){
        this.refs.staff_popup_parentcode.value = obj.PARENTCODE;
        this.refs.staff_popup_parentextcode.value = obj.PARENTEXT;
        this.refs.staff_popup_thetype.value = obj.THETYPE;
        this.refs.txtParent.value = obj.PARENTNAME;
        this.ClearThing();//clear
    },
    /**
    *thực tế xóa trên form
    */
    ClearThing:function()
    {
        this.refs.staff_popup_code.value = '';
        this.refs.txtCodeview.value = '';
        this.refs.txtName.value = '';
        this.refs.txtNote.value = '';
        this.refs.txtBirthday.value='';
        this.refs.txtArmyrank.value='';
        this.refs.txtLeveltitle.value='';
            
        //Set status
        this.refs.staff_popup_status.innerHTML = 'new';

    },
    /**
    *Hàm gán dữ liệu để sửa, được gọi bởi component cha của component này
    *para obj: thông tin về dữ liệu được thay đổi
    */
    SetInput: function (obj) {
        this.refs.staff_popup_code.value = obj.CODE;
        this.refs.staff_popup_parentcode.value = obj.PARENTCODE;
        this.refs.staff_popup_parentextcode.value = obj.PARENTEXT;
        this.refs.staff_popup_thetype.value = obj.THETYPE;
        this.refs.txtParent.value = obj.PARENTNAME;
        this.refs.txtName.value = obj.NAME;
        this.refs.txtCodeview.value = obj.CODEVIEW;
        this.refs.txtNote.value = obj.NOTE;
        this.refs.txtBirthday.value= moment(obj.BIRTHDAY).format('DD/MM/YYYY')
        this.refs.txtArmyrank.value=obj.ARMYRANK;
        this.refs.txtLeveltitle.value=obj.LEVELTITLE;
        this.refs.PHOTO.value = obj.PHOTO;
        //Set status
        this.refs.staff_popup_status.innerHTML = 'edit';
    },
    /**
    *Hiển thị, được gọi bởi component cha
    */
    Show: function () {
        $('#NewModalSQ').modal('show');
    },
    /**
    *Ẩn form hiện tại
    */
    Hide: function () {
        $('#NewModalSQ').modal('hide');
    },
    /**
    *Kiểm tra để gọi load lại cho dữ liệu từ component cha (danh sách)
    *para obj: là mã của bản ghi mới được thao tác
    */
    ReloadData:function(obj)
    {
        if(this.props.ReloadData===null||this.props.ReloadData==='undefined')
        {
            //console.log('Call load data');
            return false;
        }
        else
        {
            //console.log('Call load data!!!!!!!!!!!!!');
            this.props.ReloadData(obj);
            return true;
        }
    },
    /**
    *gọi khi bấm nút ghi
    */
    SaveClick: function ()
    {
        this.SaveData(true);
    },
    /**
    *gọi khi bấm nút ghi và tạo mới
    */
    SaveContinueClick: function () {
        this.SaveData(false);
    },
    /**
    *Thực tế ghi dữ liệu
    *para isClose xác định sau khi ghi xong sẽ đóng form, hay là tiếp tục tạo mới
    */
    SaveData:function(isClose){
        //try to save data
//        console.log("Ghi dữ liệu");
        var NAME = this.refs.txtName.value;
        var CODEVIEW = this.refs.txtCodeview.value;
        var NOTE = this.refs.txtNote.value;
        var BIRTHDAY = convertDate(this.refs.txtBirthday.value);
        //default
        var CODE = this.refs.staff_popup_code.value;
        var DEPARTMENTCODE = this.refs.staff_popup_parentcode.value;
        var THETYPE = this.refs.staff_popup_thetype.value;

        var data = {
            NAME    : NAME,
            CODEVIEW: CODEVIEW,
            NOTE: NOTE,
            DEPARTMENTCODE: DEPARTMENTCODE,
            CODE: CODE,
            THETYPE: THETYPE,
            BIRTHDAY: BIRTHDAY
        }
        //console.log(data);
            //Add or edit 1 item
            $.ajax({
                url: "/Staff/update",
                type: 'POST',
                data: data,
                dataType: 'json',
                success: function (data) {
                    if (data.ret >= 0) {
                        if(isClose)
                        {
                            this.Hide();
                        }
                        else {
                            this.ClearThing();
                        }
                        this.ReloadData(data.CODE);

                    }
                    else {
                        bootbox.alert('Lỗi ghi dữ liệu');
                    }
                }.bind(this),
                error: function (xhr, status, err) {
                    console.error(this.props.url, status, err.toString());
                }.bind(this)
            });

    },
    changeEvent1: function (e) {
        var data = new FormData();
        var files = e.target.files;
        console.log("Get file");
        for (var x = 0; x < files.length; x++) {
            data.append("file" + x, files[x]);
            console.log('Have file');
        }
        $.ajax({
            url: "/Common/post",
            type: "POST",
            data: data,
            contentType: false,
            processData: false,
            success: function (data) {
                console.log(data.sussess);
                if (data.sussess >= 0) {
                    console.log(data.filename);
                    $('#SHOWIMG1').attr("src", data.filename);
                    $('#IMG').val(data.filename);
                }
            }.bind(this)
        }).done(function () {
            console.log("xong roi");
            //$(this).addClass("done");
        });
        //f.onloadend = () => {
        //    consolelog('Xong roi');
        //    //this.setState({
        //    //    file: file,
        //    //    imagePreviewUrl: reader.result
        //    //});
        //}
        //f.readAsDataURL(file);

    },
    render: function () {
        return (
<div className="modal fade" id="NewModalSQ" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div className="modal-dialog">
          <div className="box box-info" >
              {/*Tiêu đề của form*/}
            <div className="box-header with-border">
                <button type="button" className="close ui-icon-circle-close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span className="sr-only">Close</span></button>
              <h3 className="box-title">Cập nhật Đơn vị</h3>              
                <input type="hidden" id="staff_popup_code" ref="staff_popup_code" />{/*Lưu lại mã code của bản ghi hiện tại*/}
                <input type="hidden" id="staff_popup_parentcode" ref="staff_popup_parentcode" />{/*Lưu lại mã code của cha hiện tại*/}
                <input type="hidden" id="staff_popup_parentextcode" ref="staff_popup_parentextcode" />{/*Lưu lại mã extcode của cha hiện tại*/}
                <input type="hidden" id="staff_popup_thetype" ref="staff_popup_thetype" />{/*Lưu lại mã kiểu menu hiện tại*/}
            </div>
              {/*Nội dung của form*/}
                  <div className="modal-body" >{/*Trong trường hợp nhiều trường hơn - độ cao vượt quá trang thì đặt thông số này để xác định độ cao tối đa tự động tạo thanh cuộn: style={{ height: '300px', overflow:'auto'}}*/}
            <form className="form-horizontal">
              <div className="box-body">
                <div className="form-group">
                  <label htmlFor="txtCodeview" className="col-sm-3 control-label">Đơn vị</label>
                  <div className="col-sm-9">
                    <input type="text" className="form-control" id="txtParent" ref='txtParent' placeholder="Đơn vị" readOnly />
                  </div>
                </div>
                <div className="form-group">
                  <label htmlFor="txtCodeview" className="col-sm-3 control-label">Mã CBNV</label>
                  <div className="col-sm-9">
                    <input type="text" className="form-control" id="txtCodeview" ref='txtCodeview' placeholder="Mã CBNV" />
                  </div>
                </div>
                <div className="form-group">
                  <label htmlFor="txtName" className="col-sm-3 control-label">Họ và Tên</label>
                  <div className="col-sm-9">
                    <input type="text" className="form-control" id="txtName" ref='txtName' placeholder="Họ và Tên" />
                  </div>
                </div>
                <div className="form-group date ">
                  <label htmlFor="txtBirthday" className="col-sm-3 control-label">Ngày sinh</label>
                  <div className="col-sm-9 date form_date">
                    <input type="text" className="form-control" id="txtBirthday" ref='txtBirthday' placeholder="Ngày sinh" />
                          <span className="add-on"><i className="icon-th"></i></span>
                  </div>
                </div>
                <div className="form-group">
                  <label htmlFor="txtArmyrank" className="col-sm-3 control-label">Cấp bậc</label>
                  <div className="col-sm-9">
                    <input type="text" className="form-control" id="txtArmyrank" ref='txtArmyrank' placeholder="Cấp bậc" />
                  </div>
                </div>
                 <div className="form-group">
                  <label htmlFor="txtLeveltitle" className="col-sm-3 control-label">Chức vụ</label>
                  <div className="col-sm-9">
                    <input type="text" className="form-control" id="txtLeveltitle" ref='txtLeveltitle' placeholder="Chức vụ" />
                  </div>
                </div>
                <div className="form-group">
                  <label htmlFor="txtNote" className="col-sm-3 control-label">Ghi chú</label>
                  <div className="col-sm-9">
                    <input type="text" className="form-control" id="txtNote" ref='txtNote' placeholder="Ghi chú" />
                  </div>
                </div>
                <div className="form-group">
                    <label className="col-sm-3 control-label">Ảnh</label>
                    <div className="col-sm-9">
                        <input type="text" className="form-control hidden" ref="PHOTO" id="PHOTO" />
                        <input type="file" accept=".gif,.jpg,.jpeg,.png,.bmp" className="form-control col-sm-6 " ref="FILEUPLOAD1" id="FILEUPLOAD1" onChange={this.changeEvent1} />
                        <img id="SHOWIMG1" src="" alt="Chưa có ảnh" />
                    </div>
                </div>

                

              </div>
                {/*Các nút lệnh ở dưới*/}
            </form>
                  </div>
              <div className="box-footer modal-footer">
                <span className="label label-warning" style={{float:'left'}} id="staff_popup_status" ref='staff_popup_status'>i</span>
                <button type="button" className="btn btn-primary" onClick={this.SaveClick}><i className="fa fa-floppy-o"></i> Ghi</button>
                <button type="button" className="btn btn-primary" onClick={this.SaveContinueClick}><i className="fa fa-plus-circle"></i> Ghi và thêm mới</button>
                <button type="button" className="btn btn-default " data-dismiss="modal"><i className="fa fa-sign-out" ></i>Thoát</button>
              </div>
                  </div>

        </div>
    

</div>
            );
    }
});