using IS.fitframework;
using IS.Sess;
using IS.uni;
using System;
using System.Collections.Generic;
using System.Web.Mvc;

namespace nerp.Controllers.core
{
    public class ProvinceController : Controller
    {
        private session ses = new session();

        public ActionResult Index(string id)
        {
            //chọn mặc định một cái menu nào đó
            string defaultvalue = "{\"code\":\"" + id + "\", \"subcode\":\"345\", \"thedate\":\"2017-2-3\"}";
            ViewBag.defaultvalue = defaultvalue;
            string[] jsx = {
                "/Jsx/_Shared/Tree.jsx"
                ,"/Scripts/Ag-grid/ag-grid.js"
                ,"/Jsx/_Shared/SearchDialog.jsx"
                ,"/Jsx/_Shared/Combobox.jsx"
                ,"/Jsx/_Shared/Combobox3.jsx"
                ,"/jsx/Core/Province/Provincepopup.jsx"
                ,"/jsx/_shared/AgGrid.jsx"
                ,"/Jsx/_Shared/ButtonList.jsx"
                ,"/jsx/Core/Province/Provincelist.jsx"
                };
            ViewBag.jsx = jsx;
            return View("Adminindex");//Lấy index mặc định trong share
            //Đến trang thông báo khi không có phân quyền sử dụng chức năng này
            //if (ses.func("SUPADMIN") <= 0)
            //{
            //    ses.gotoPage("/staff/login", "Thông báo", "Không có quyền thực hiện chức năng", 3000);
            //    return Redirect("/common/index");
            //}
            //Gán dữ liệu mặc định cho phần chọn
            //if (string.IsNullOrEmpty(id))
            //{
            //    id = "";
            //}
            //ViewBag.thetype = "FRONTEND";
            //ViewBag.id = id;
            //ViewBag.jsx = "~/Jsx/Sysmenu/Sysmennu.jsx";
            //return View();
        }

        public JsonResult getAll()
        {
            List<PROVINCE_OBJ> li = null;
            //Khai báo lấy dữ liệu
            PROVINCE_BUS bus = new PROVINCE_BUS();
            List<fieldpara> lipa = new List<fieldpara>();
            //order by theorder, with pagesize and the page
            li = bus.getAllBy2("NAME", lipa.ToArray());
            bus.CloseConnection();
            //District
            DISTRICT_BUS bus_district = new DISTRICT_BUS();
            List<DISTRICT_OBJ> li_district = bus_district.getAllBy2("NAME");
            bus_district.CloseConnection();
            TOWN_BUS bus_town = new TOWN_BUS();
            List<TOWN_OBJ> li_town = bus_town.getAllBy2("NAME");
            bus_town.CloseConnection();
            foreach (var obj_district in li_district)
            {
                PROVINCE_OBJ obj_ap = new PROVINCE_OBJ();
                obj_ap.CODE = obj_district.CODE;
                obj_ap.CODEVIEW = obj_district.CODEVIEW;
                obj_ap.NAME = obj_district.NAME;
                obj_ap.BEGINDATE = obj_district.BEGINDATE;
                obj_ap.ENDDATE = obj_district.ENDDATE;
                obj_ap.NOTE = obj_district.NOTE;
                obj_ap.LOCK = obj_district.LOCK;
                obj_ap.PARENTCODE = obj_district.PARENTCODE;
                obj_ap.THETYPE = obj_district.THETYPE;
                li.Add(obj_ap);
            }
            foreach (var obj_town in li_town)
            {
                PROVINCE_OBJ obj_ap = new PROVINCE_OBJ();
                obj_ap.CODE = obj_town.CODE;
                obj_ap.CODEVIEW = obj_town.CODEVIEW;
                obj_ap.NAME = obj_town.NAME;
                obj_ap.BEGINDATE = obj_town.BEGINDATE;
                obj_ap.ENDDATE = obj_town.ENDDATE;
                obj_ap.NOTE = obj_town.NOTE;
                obj_ap.LOCK = obj_town.LOCK;
                obj_ap.PARENTCODE = obj_town.PARENTCODE;
                obj_ap.THETYPE = obj_town.THETYPE;
                li.Add(obj_ap);
            }
            //li = li.Skip((page - 1) * pageSize).Take(pageSize).ToList();
            return Json(new
            {
                lst = li,//Danh sách
                ret = 0//ok
            }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetSearch(string thetype, string parentcode, string name, string nametype, string note, string notetype)
        {
            if (string.IsNullOrEmpty(thetype))
            {
                List<PROVINCE_OBJ> liProvince = GetAllSearch(name, nametype, note, notetype);
                return Json(new { li = liProvince }, JsonRequestBehavior.AllowGet);
            }
            if (thetype.Equals("PROVINCE"))
            {
                List<DISTRICT_OBJ> liDistrict = new DistrictController().GetAllSearch(parentcode, name, nametype, note, notetype);
                return Json(new { li = liDistrict }, JsonRequestBehavior.AllowGet);
            }
            List<TOWN_OBJ> liTown = new TownController().GetAllSearch(parentcode, name, nametype, note, notetype);
            return Json(new { li = liTown }, JsonRequestBehavior.AllowGet);
        }

        public List<PROVINCE_OBJ> GetAllSearch(string name, string nametype, string note, string notetype)
        {
            List<PROVINCE_OBJ> li = null;

            //Khai báo lấy dữ liệu
            PROVINCE_BUS bus = new PROVINCE_BUS();
            List<fieldpara> lipa = new List<fieldpara>();
            if (!string.IsNullOrEmpty(name))
            {
                lipa.Add(new fieldpara("NAME", name, (int)(nametype.ToUpper() == "TRUE" ? searchType.NONE : searchType.LIKE)));
            }
            if (!string.IsNullOrEmpty(note))
            {
                lipa.Add(new fieldpara("NOTE", note, (int)(notetype.ToUpper() == "TRUE" ? searchType.NONE : searchType.LIKE)));
            }
            //order by theorder, with pagesize and the page
            li = bus.getAllBy2(" NAME ", lipa.ToArray());
            bus.CloseConnection();
            //li = li.Skip((page - 1) * pageSize).Take(pageSize).ToList();
            return li;
        }

        /// <summary>
        /// dùng để update dữ liệu cho bảng province, district, town
        /// </summary>
        /// <param name="obj">dữ liệu cần cập nhật</param>
        /// <param name="theType">
        /// "" hoặc null: update dữ liệu cho bảng province
        /// province: update dữ liệu cho bảng district
        /// district: update dữ liệu cho bảng town
        /// </param>
        /// <returns></returns>
        public JsonResult UpdateJson(PROVINCE_OBJ obj, string theType)
        {
            var ret = 0;
            if (string.IsNullOrEmpty(theType))
            {
                ret = update(obj);
            }
            else if (theType.Equals("PROVINCE"))
            {
                DISTRICT_OBJ districtObj = new DISTRICT_OBJ();
                districtObj.CODE = obj.CODE;
                districtObj.CODEVIEW = obj.CODEVIEW;
                districtObj.NAME = obj.NAME;
                districtObj.BEGINDATE = obj.BEGINDATE;
                districtObj.ENDDATE = obj.ENDDATE;
                districtObj.NOTE = obj.NOTE;
                districtObj.LOCK = obj.LOCK;
                districtObj.PARENTCODE = obj.PARENTCODE;
                ret = new DistrictController().Update(districtObj);
            }
            else
            {
                TOWN_OBJ townObj = new TOWN_OBJ();
                townObj.CODE = obj.CODE;
                townObj.CODEVIEW = obj.CODEVIEW;
                townObj.NAME = obj.NAME;
                townObj.BEGINDATE = obj.BEGINDATE;
                townObj.ENDDATE = obj.ENDDATE;
                townObj.NOTE = obj.NOTE;
                townObj.LOCK = obj.LOCK;
                townObj.PARENTCODE = obj.PARENTCODE;
                ret = new TownController().update(townObj);
            }
            return Json(new { ret = ret }, JsonRequestBehavior.AllowGet);
        }

        public int update(PROVINCE_OBJ obj)
        {
            List<string> li_ref = new List<string>();// danh sach file sẽ được thêm vào
            List<string> li_refd = new List<string>();// Danh sách file bị xoá đi
            //if (ses.func("SUPADMIN") <= 0)
            //{
            //    return Json(new { sussess = -3 }, JsonRequestBehavior.AllowGet);

            //}
            PROVINCE_BUS bus = new PROVINCE_BUS();
            int ret = 0;
            int add = 0;

            PROVINCE_OBJ obj_temp = null;
            //kiểm tra tồn tại cho trường hợp sửa
            if (!string.IsNullOrEmpty(obj.CODE))//edit
            {
                obj_temp = bus.GetByID(new PROVINCE_OBJ.BusinessObjectID(obj.CODE));
                if (obj_temp == null)
                {
                    ret = -4;
                }
            }
            else
            {
                obj_temp = new PROVINCE_OBJ();
            }

            if (ret < 0)
            {
                //đóng kết nối trước khi trả về
                bus.CloseConnection();
                //ban ghi sửa đã bị xóa
                return ret;
            }
            //hết kiểm tra tồn tại bản ghi
            obj_temp.EDITTIME = DateTime.Now;//Thời điểm sủa bản ghi
            obj_temp.EDITUSER = ses.loginCode;//Người sửa bản ghi

            obj_temp.CODEVIEW = obj.CODEVIEW;
            obj_temp.NAME = obj.NAME;
            obj_temp.NOTE = obj.NOTE;
            obj_temp.PARENTCODE = obj.PARENTCODE;
            obj_temp.LOCK = obj.LOCK;
            obj_temp.BEGINDATE = obj.BEGINDATE;
            obj_temp.ENDDATE = obj.ENDDATE;
            obj_temp.THETYPE = "PROVINCE";
            if (obj_temp.PARENTCODE == null)
            {
                obj_temp.PARENTCODE = "";
            }
            //Kiểm tra tình trạng sửa hay là thêm mới
            if (string.IsNullOrEmpty(obj.CODE))
            {
                //Thêm mới
                add = 1;
                //Sinh mã
                obj_temp.CODE = bus.genNextCode(obj);
                obj_temp.LOCK = 0;
                obj_temp.LOCKDATE = DateTime.Now;
                //obj_temp.MODULECODE = "CORE";//for this
            }

            if (add == 1)
            {
                ret = bus.insert(obj_temp);
            }
            else
            {
                //gán _ID để xác định bản ghi sẽ được cập nhật
                obj_temp._ID.CODE = obj.CODE;
                ret = bus.update(obj_temp);
            }

            if (ret >= 0)
            {
                bus.CommitTransaction();
            }
            else
            {
                bus.RollbackTransaction();
            }
            bus.CloseConnection();
            //some thing like that
            return ret;
        }

        /// <summary>
        /// dùng để xóa dữ liệu các bảng province, district, town
        /// </summary>
        /// <param name="code">danh sách code được chọn</param>
        /// <param name="theType">
        /// "" hoặc null: xóa dữ liệu cho bảng province
        /// province: xóa dữ liệu cho bảng district
        /// district: xóa dữ liệu cho bảng town
        /// </param>
        /// <returns></returns>
        public JsonResult DeleteJson(List<string> code, string theType)
        {
            var ret = 0;
            if (string.IsNullOrEmpty(theType))
            {
                ret = Delete(code);
            }
            else if (theType.Equals("PROVINCE"))
                ret = new DistrictController().Delete(code);
            else
            {
                ret = new TownController().Delete(code);
            }
            return Json(new { ret = ret }, JsonRequestBehavior.AllowGet);
        }

        public int Delete(List<string> code)
        {
            int ret = 0;
            PROVINCE_BUS bus = new PROVINCE_BUS();
            List<PROVINCE_OBJ.BusinessObjectID> li_del = new List<PROVINCE_OBJ.BusinessObjectID>();
            foreach (string item in code)
            {
                // kiểm cha có con ko, nếu có thì ko cho xóa
                var liDistrict = new DISTRICT_BUS().getAllBy2(new fieldpara("PARENTCODE", item));
                if (liDistrict.Count <= 0)
                    li_del.Add(new PROVINCE_OBJ.BusinessObjectID(item));
                ret = bus.checkCode(null, new fieldpara("parentcode", item));
                if (ret > 0)
                {
                    ret = -2;
                    break;
                }
            }
            //ok
            if (ret >= 0)
            {
                //SYSMENUPRIORITY_BUS bus_smp = new SYSMENUPRIORITY_BUS();
                //bus.BeginTransaction();
                //bus_smp.setConnection(bus);
                //foreach (SYSMENU_OBJ.BusinessObjectID obj in li_del)
                //{
                //    ret = bus_smp.Delete(new fieldpara("SYSMENUCODE", obj.CODE));
                //    if (ret < 0)
                //    {
                //        break;
                //    }
                //}
                //if (ret >= 0)
                //{
                //    ret = bus.DeletetMultiItems(li_del);
                //}

                ret = bus.DeletetMultiItems(li_del);
                if (ret >= 0)
                {
                    bus.CommitTransaction();
                }
                else
                {
                    bus.RollbackTransaction();
                }
            }

            bus.CloseConnection();

            return ret;
        }
    }
}