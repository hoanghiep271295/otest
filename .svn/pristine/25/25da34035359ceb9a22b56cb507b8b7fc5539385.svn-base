using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Mvc;
using IS.Config;
using IS.fitframework;
using IS.Lang;
using IS.Sess;
using IS.uni;
using Newtonsoft.Json;

namespace nerp.Controllers.exam
{
    public class ExamResultController : Controller
    {
        // GET: ExamResult
        readonly session _ses = new session();

        public ActionResult Index(string id, string subid)
        {
            //Id is markcode, subid is examtimecode
            if (string.IsNullOrEmpty(id))
            {
                id = "1708310001";
            }
            if (string.IsNullOrEmpty(subid))
            {
                subid = "1709010001";
            }
            string defaultvalue = "{\"markcode\":\"" + id + "\", \"examtimecode\":\"" + subid + "\"}";
            ViewBag.defaultvalue = defaultvalue;
            string[] jsx = {
                "/Jsx/StudentExam/ExamResult.jsx"
            };
            ViewBag.jsx = jsx;
            //Gán các thông tin về hiển thị cho view và cho client javascript thông qua ham getLangObject()
            string clientjson;
            dynamic objlang = Langresource.LangResource(AppConfig.langfilename, _ses.frontlang, "home-index3", out clientjson);
            ViewBag.langobj = objlang;
            ViewBag.langobjscript = clientjson;// stringobj;
            //Mặc định luôn lấy view của Index 3 để hiển thị cho phần quản trị
            return View("StudentIndex");
        }

        public string RegexString(string str)
        {

            RegexOptions options = RegexOptions.None;
            Regex regex = new Regex("[ ]{2,}", options);
            //loai bo space dau va cuoi 1 chuoi
            str = str.Trim();
            //loai bo tat ca mulitple space trong chuoi
            str = regex.Replace(str, " ");

            //loai bo tat ca cac dau cach truoc dau phay
            str = Regex.Replace(str, " *,", ",");

            //thay the sau dau phay la dau cach(space)
            str = Regex.Replace(str, @"(?<=,)(?!\s)", " ");

            //muon loai bo di tat ca cac khoang trang
            str = Regex.Replace(str, @"(\s+\.)", ".");


            //thay the sau dau cham la dau cach(space)
            str = Regex.Replace(str, @"(?<=\.)(?!\s)", " ");
            return str;
        }

        public JsonResult UploadBlob()
        {
            var ret = 0;
            const int megabyte = 1024 * 1024;
            HttpFileCollectionBase files = Request.Files;
            HttpPostedFileBase file = files[0];
            if (file != null)
            {
                var extension = Path.GetExtension(file.FileName.ToLowerInvariant());
                string[] extensions = { ".gif", ".jpg", ".png", ".svg", ".webp", ".mp3", ".mp4", ".wav", ".ogg" };
                if (!extensions.Contains(extension))
                {
                    ret = -1;
                    //    throw new InvalidOperationException("Invalid file extension.");
                }
                if (file.ContentLength > (30 * megabyte))
                {
                    ret = -2;
                    //  throw new InvalidOperationException("File size limit exceeded.");
                }
                // var fileName = Guid.NewGuid() + extension;
                var fileName = DateTime.Now.ToString("ddMMyyyy_HHmmss") + extension;
                var targetFolder = Server.MapPath("~/Content/RecordAudio/");
                var path = Path.Combine(targetFolder, fileName);
                file.SaveAs(path);
                var location = Path.Combine("/Content/RecordAudio", fileName).Replace('\\', '/');
                if (_ses.tSOURCEPATHSESSION == null)
                    _ses.tSOURCEPATHSESSION = new List<string>();
                _ses.tSOURCEPATHSESSION.Add(file.FileName);//(files.AllKeys[0]);
                if (_ses.tDESTINATIONPATHSESSION == null)
                    _ses.tDESTINATIONPATHSESSION = new List<string>();
                _ses.tDESTINATIONPATHSESSION.Add(location);
                return Json(new {location, ret }, JsonRequestBehavior.AllowGet);
            }
            return Json(new {ret }, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Kiểm tra chuyển từ dạng code sang codeview để kiểm tra loại phù hợp
        /// </summary>
        /// <param name="li"></param>
        /// <param name="code"></param>
        /// <returns></returns>
        string getCodeview(List<QUESTIONTYPE_OBJ> li, string code)
        {
            code = code.ToUpper();
            string v = code;
            foreach (QUESTIONTYPE_OBJ obj in li)
            {
                if (obj.CODE.ToUpper() == code)
                {
                    v = obj.CODEVIEW.ToUpper().Trim();
                }
            }
            return v;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="listobj">danh sach cac cau tra loi </param>
        /// <param name="examformcode">ma de thi</param>
        /// <param name="listexamformdetail">ma phan thi</param>
        /// <param name="examhallstudentcode"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult UpdateExamResult(string listobj, string examformcode, string listexamformdetail, string examhallstudentcode)
        {
            //bài thi của sinh viên sẽ đưa lên gồm có : mã câu hỏi,mã câu trả lời, nội dung câu trả lời
            // examformcode: mã đề thi , examformdetailcode: mã phần thi
            // answerfile: link file muốn lưu trên server cho bài thi nói
            ////list answer, QuestionAnswer {MaCauHoi,MaXTL}
            var ret = 0;
            int add = 0;

            QUESTIONTYPE_BUS busQuestiontype = new QUESTIONTYPE_BUS();
            List<QUESTIONTYPE_OBJ> liQuestiontype = busQuestiontype.getAllBy2();
            busQuestiontype.CloseConnection();
            //list question answer
            List<QuestionAnswer> listStudentAnswer = JsonConvert.DeserializeObject<List<QuestionAnswer>>(listobj);
            if (listStudentAnswer.Count <= 0)
            {
                ret = -1;
            }
            //list EXAMFORMDETAIL_OBJ  
            List<EXAMFORMDETAIL_OBJ> listEXamDetail = JsonConvert.DeserializeObject<List<EXAMFORMDETAIL_OBJ>>(listexamformdetail);
            if (listEXamDetail.Count <= 0)
            {
                ret = -2;
            }
            //list  examform
            string exCode = examformcode;
            EXAMFORM_OBJ objExForm = JsonConvert.DeserializeObject<EXAMFORM_OBJ>(exCode);
            //examhallstudentcode
            string exHallcode = examhallstudentcode;
            //object examresult
            EXAMRESULT_BUS bus = new EXAMRESULT_BUS();

            QUESTION_BUS busQuestion = new QUESTION_BUS();
            //QUESTIONGROUP_BUS busQGroup = new QUESTIONGROUP_BUS();
            //duyet trng list examformdetail
            foreach (var item in listEXamDetail)
            {
                //lay danh sach question theo tung questiongroup trong examformdetail
                List<QUESTION_OBJ> liQuestion = busQuestion.getAllBy2("CODE", new fieldpara("QUESTIONGROUPCODE", item.QUESTIONGROUPCODE));
                //duyet trong list question
                foreach (var question in liQuestion)
                {
                    //duyet trong danh sach cau tra loi cua sinh vien de dua ra la cau hoi nay la cap nhat hay them moi
                    foreach (var answer in listStudentAnswer)
                    {
                        //kiem tra su ton tai cua cau hoi
                        if (answer.MaCauHoi == question.CODE)
                        {
                            //question group to determinecasse   writing 
                            var objTemp = bus.GetByID(new EXAMRESULT_OBJ.BusinessObjectID(exHallcode, item.CODE, question.CODE));
                            //chua co thi tuc la them moi
                            if (objTemp == null)
                            {
                                add = 1;
                                objTemp = new EXAMRESULT_OBJ();
                            }
                            objTemp.EXAMHALLSTUDENTCODE = exHallcode;
                            objTemp.EXAMFORMDETAILCODE = item.CODE;
                            objTemp.EXAMFORMCODE = objExForm.CODE;
                            objTemp.QUESTIONCODE = question.CODE;
                            objTemp.QUESTIONGROUPCODE = item.QUESTIONGROUPCODE;
                            switch (getCodeview(liQuestiontype, item._QUESTIONGROUPCODE.QUESTIONTYPECODE)) //(item._QUESTIONGROUPCODE.QUESTIONTYPECODE)//Sau này phải thay nó bằng các codeview chứ không sử dụng code trong cơ sở dữ liệu - revise - MR Hiệp
                            {
                                //multichoice
                                case "MC"://"1707130001":
                                    objTemp.ANSWERCODE = answer.MaCauTl;
                                    objTemp.ANSWERTEXT = "";
                                    break;
                                //case CO, true,false,not given
                                case "CO":
                                    objTemp.ANSWERCODE = answer.MaCauTl;
                                    objTemp.ANSWERTEXT = "";
                                    break;
                                //write
                                case "WR":// "1707130007":
                                    objTemp.ANSWERCODE = "";
                                    objTemp.ANSWERTEXT = answer.MaCauTl;
                                    break;
                                //rewrite
                                case "RW":// "1707130004":
                                    objTemp.ANSWERCODE = "";
                                    objTemp.ANSWERTEXT = answer.MaCauTl;
                                    break;
                                case "LA":// "1708300007": //LA
                                    objTemp.ANSWERFILE = GetName(answer.MaCauTl);
                                    break;
                                //trường hợp điền từ vào ô trống,
                                case "FG":
                                    objTemp.ANSWERCODE = "";
                                    objTemp.ANSWERTEXT = answer.MaCauTl;
                                    break;
                                default:
                                    objTemp.ANSWERCODE = "";
                                    objTemp.ANSWERTEXT = "";
                                    break;

                            }
                            objTemp.LOCK = objExForm.LOCK;
                            objTemp.LOCKDATE = DateTime.Now;
                            objTemp.MARK = 0;
                            if (add > 0)
                            {
                                ret = bus.insert(objTemp);
                            }
                            else
                            {
                                objTemp._ID.QUESTIONCODE = question.CODE;
                                objTemp._ID.EXAMFORMDETAILCODE = item.CODE;
                                objTemp._ID.EXAMHALLSTUDENTCODE = exHallcode;
                                ret = bus.update(objTemp);
                            }
                        }

                    }
                }

            }
            if (ret >= 0)
            {
                _ses.tSOURCEPATHSESSION?.Clear();
                _ses.tDESTINATIONPATHSESSION?.Clear();
            }
            return Json(new
            {
                ret
            }, JsonRequestBehavior.AllowGet);
        }
        /// <summary>
        /// Lấy tên file
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public string GetName(string name)
        {
            string st = "";
            int i;
            if (_ses.tSOURCEPATHSESSION == null)
            {
                return st;
            }
            for (i = 0; i < _ses.tSOURCEPATHSESSION.Count; i++)
            {
                if (_ses.tSOURCEPATHSESSION[i].ToUpper() == name.ToUpper())
                {
                    st = _ses.tDESTINATIONPATHSESSION[i];
                }
            }
            return st;
        }
        /// <summary>
        /// lấy kết quả bài thi dựa trên mark code
        /// </summary>
        /// <param name="markcode"></param>
        /// <returns></returns>      
        /// show questiongroup
        /// show question
        /// show answer
        /// put data//hide other answer
        public JsonResult ShowData(string markcode)
        {
            var ret = -1;

            int numberQuestion = 0;
            EXAMHALLSTUDENT_BUS bus = new EXAMHALLSTUDENT_BUS();
            EXAMHALLSTUDENT_OBJ obj = bus.GetByKey(new fieldpara("MARKCODE", markcode, 0));
            bus.CloseConnection();

            //EXAMRESULT_BUS busExResult = new EXAMRESULT_BUS();
            //List<EXAMRESULT_OBJ> liExResult = busExResult.getAllBy2("QUESTIONCODE", new fieldpara("EXAMHALLSTUDENTCODE", obj.CODE, 0));

            EXAMFORM_BUS busExamform = new EXAMFORM_BUS();
            EXAMFORM_OBJ objExamform = null;
            if (ret >= 0)
            {
                objExamform = busExamform.GetByID((new EXAMFORM_OBJ.BusinessObjectID(obj.EXAMFORMCODE)));
                busExamform.CloseConnection();
                if (objExamform == null)
                {
                    ret = -2;
                }
            }
            //Danh sachs cau truc
            EXAMFORMDETAIL_BUS busExamformdetail = new EXAMFORMDETAIL_BUS();
            List<EXAMFORMDETAIL_OBJ> liExamformdetail = new List<EXAMFORMDETAIL_OBJ>();
            if (ret >= 0)
            {
                if (objExamform != null)
                    liExamformdetail = busExamformdetail.getAllBy2("THEORDER", new fieldpara("EXAMFORMCODE", objExamform.CODE));
                busExamformdetail.CloseConnection();
                if (liExamformdetail == null)
                {
                    ret = -3;
                }
            }
            List<fieldpara> lipa = new List<fieldpara>();
            List<jointable> lijoin = new List<jointable>();
            //Lay danh sach cac nhom cau hoi
            QUESTIONGROUP_BUS busQuestiongroup = new QUESTIONGROUP_BUS();
            List<QUESTIONGROUP_OBJ> liQuestiongroup = new List<QUESTIONGROUP_OBJ>();

            if (ret >= 0)
            {
                if (objExamform != null)
                    lijoin.Add(new jointable(typeof(EXAMFORMDETAIL_OBJ), "CODE", "QUESTIONGROUPCODE", new fieldpara("EXAMFORMCODE", objExamform.CODE)));
                liQuestiongroup = busQuestiongroup.getAllBy2("CODE", lipa, lijoin);
                if (liQuestiongroup == null)
                {
                    ret = -4;
                }
                busQuestiongroup.CloseConnection();
            }
            //Lay danh sach cau hoi
            QUESTION_BUS busQuestion = new QUESTION_BUS();
            List<QUESTION_OBJ> liQuestion = new List<QUESTION_OBJ>();
            if (ret >= 0)
            {
                lijoin.Clear();
                if (objExamform != null)
                { lijoin.Add(new jointable(typeof(EXAMFORMDETAIL_OBJ), "QUESTIONGROUPCODE", "QUESTIONGROUPCODE", 
                             new fieldpara("examformcode", objExamform.CODE))); }
                  
                liQuestion = busQuestion.getAllBy2("CODE", lipa, lijoin);

                if (liQuestion == null)
                {
                    ret = -5;
                }
                else
                {
                    numberQuestion = liQuestion.Count;
                }
                busQuestion.CloseConnection();
            }
            //Lay danh danh cac dap an
            ANSWER_BUS busAnswer = new ANSWER_BUS();
            List<ANSWER_OBJ> liAnswer = new List<ANSWER_OBJ>();
            if (ret >= 0)
            {
                lijoin.Clear();
                if (objExamform != null)
                    lijoin.Add((new jointable(typeof(EXAMFORMDETAIL_OBJ), "QUESTIONGROUPCODE", "QUESTIONGROUPCODE", new fieldpara("examformcode", objExamform.CODE))));
                liAnswer = busAnswer.getAllBy2("CODE", lipa, lijoin);
                if (liAnswer == null)
                {
                    ret = -6;
                }
                busAnswer.CloseConnection();
            }


            var jsonResult = Json(new
            {
                numberQuestion,//so luong cau hoi
                ObjexamHallstudent = obj,//examhallstudent code
                ObjexamForm = objExamform,//examform
                liExamformDetail = liExamformdetail,//Danh sách   examdetail   
                liQuestiongroup,
                li_question = liQuestion,
                li_answer = liAnswer, ret//ok
            }, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="markcode">mã</param>
        /// <param name="examtimecode"></param>
        /// <returns></returns>
        public JsonResult ShowExamResult(string markcode, string examtimecode)
        {
            int ret = 0;
            int numberQuestion = 0;
            EXAMHALLSTUDENT_BUS bus = new EXAMHALLSTUDENT_BUS();
            EXAMHALLSTUDENT_OBJ obj = bus.GetByKey(new fieldpara("MARKCODE", markcode, 0), new fieldpara("examtimecode", examtimecode));



            bus.CloseConnection();
            //Lấy được một lần thi
            if (obj == null)
            {
                ret = -1;
            }
            EXAMFORM_BUS busExamform = new EXAMFORM_BUS();
            EXAMFORM_OBJ objExamform = null;
            //Lấy đề thi
            if (ret >= 0)
            {
                if (obj != null)
                    objExamform = busExamform.GetByID((new EXAMFORM_OBJ.BusinessObjectID(obj.EXAMFORMCODE)));
                busExamform.CloseConnection();
                if (objExamform == null)
                {
                    ret = -2;
                }
            }
            //Danh sachs cau truc
            EXAMFORMDETAIL_BUS busExamformdetail = new EXAMFORMDETAIL_BUS();
            List<EXAMFORMDETAIL_OBJ> liExamformdetail = new List<EXAMFORMDETAIL_OBJ>();
            if (ret >= 0)
            {
                if (objExamform != null)
                    liExamformdetail = busExamformdetail.getAllBy2("THEORDER", new fieldpara("EXAMFORMCODE", objExamform.CODE));
                busExamformdetail.CloseConnection();
                if (liExamformdetail == null)
                {
                    ret = -3;
                }
            }
            List<fieldpara> lipa = new List<fieldpara>();
            List<jointable> lijoin = new List<jointable>();
            //Lay danh sach cac nhom cau hoi
            QUESTIONGROUP_BUS busQuestiongroup = new QUESTIONGROUP_BUS();
            List<QUESTIONGROUP_OBJ> liQuestiongroup = new List<QUESTIONGROUP_OBJ>();

            if (ret >= 0)
            {
                if (objExamform != null)
                    lijoin.Add(new jointable(typeof(EXAMFORMDETAIL_OBJ), "CODE", "QUESTIONGROUPCODE", new fieldpara("EXAMFORMCODE", objExamform.CODE)));
                liQuestiongroup = busQuestiongroup.getAllBy2("CODE", lipa, lijoin);
                if (liQuestiongroup == null)
                {
                    ret = -4;
                }
                busQuestiongroup.CloseConnection();
            }

            //Lay danh sach cau hoi
            QUESTION_BUS busQuestion = new QUESTION_BUS();
            List<QUESTION_OBJ> liQuestion = new List<QUESTION_OBJ>();
            if (ret >= 0)
            {
                lijoin.Clear();
                if (objExamform != null)
                    lijoin.Add(new jointable(typeof(EXAMFORMDETAIL_OBJ), "QUESTIONGROUPCODE", "QUESTIONGROUPCODE", new fieldpara("examformcode", objExamform.CODE)));
                liQuestion = busQuestion.getAllBy2("CODE", lipa, lijoin);

                if (liQuestion == null)
                {
                    ret = -5;
                }
                else
                {
                    numberQuestion = liQuestion.Count;
                }
                busQuestion.CloseConnection();
            }
            //Lay danh danh cac dap an
            ANSWER_BUS busAnswer = new ANSWER_BUS();
            List<ANSWER_OBJ> liAnswer = new List<ANSWER_OBJ>();
            if (ret >= 0)
            {
                lijoin.Clear();
                if (objExamform != null)
                    lijoin.Add((new jointable(typeof(EXAMFORMDETAIL_OBJ), "QUESTIONGROUPCODE", "QUESTIONGROUPCODE", new fieldpara("examformcode", objExamform.CODE))));
                liAnswer = busAnswer.getAllBy2("CODE", lipa, lijoin);
                if (liAnswer == null)
                {
                    ret = -6;
                }
                busAnswer.CloseConnection();
            }
            //lay danh sach ket qua bai thi
            EXAMRESULT_BUS busExamresult = new EXAMRESULT_BUS();
            List<EXAMRESULT_OBJ> liExamresult = new List<EXAMRESULT_OBJ>();
            if (ret >= 0)
            {
                if (obj != null)
                {
                    liExamresult = busExamresult.getAllBy2(new fieldpara("examhallstudentcode", obj.CODE));
                }
                if (liExamresult == null)
                {
                    ret = -7;
                }
                busExamresult.CloseConnection();
            }

            var jsonResult = Json(new
            {
                numberQuestion,//so luong cau hoi
                ObjexamHallstudent = obj,//examhallstudent code
                ObjexamForm = objExamform,//examform
                liExamformDetail = liExamformdetail,//Danh sách examdetail   
                liQuestiongroup,
                li_question = liQuestion,
                li_answer = liAnswer,
                li_examresult = liExamresult,//danh sách đáp án
                ret//ok
            }, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;

        }
        /// <summary>
        /// lấy danh sách kết quả thi trong 1 course của 1 sinh viên
        /// </summary>
        /// <param name="markcode"></param>
        /// <param name="coursecode">mã lớp môn học</param>
        /// <returns></returns>
        public JsonResult GetResult(string markcode, string coursecode)
        {
            //
            List<Exam> liExam = new List<Exam>();
            // lấy danh sách các lần thi của sinh viên trong 1 lớp học
            EXAMHALLSTUDENT_BUS bus = new EXAMHALLSTUDENT_BUS();
            List<fieldpara> lipa = new List<fieldpara>
            {
                new fieldpara("MARKCODE", markcode, 0),
                new fieldpara("COURSECODE", coursecode, 0),
                new fieldpara("UNIVERSITYCODE", _ses.gUNIVERSITYCODE, 0)
            };
            var liExamHallStudent = bus.getAllBy2("CODE", lipa.ToArray());
            // lấy điểm cụ thể của từng đợt thi
            if (liExamHallStudent != null)
            {
                EXAMRESULT_BUS examresultBus = new EXAMRESULT_BUS();

                foreach (var item in liExamHallStudent)
                {
                    Exam exam = new Exam
                    {
                        ExamHallStudentCode = item.CODE
                    };
                    // lấy tên đợt thi
                    string examTimeName = item._EXAMTIMECODE.NAME;
                    exam.Name = examTimeName;
                    // danh sách các câu hỏi và điểm trong bài thi
                    List<Question> liQuestion = new List<Question>();
                    var liExamReSult = examresultBus.getAllBy2("QUESTIONCODE",
                        new fieldpara("EXAMHALLSTUDENTCODE", item.CODE, 0));

                    for (int i = 0; i < liExamReSult.Count - 1; i++)
                    {
                        double totalMark = 0;
                        var questiongroupcode = liExamReSult[i].QUESTIONGROUPCODE;
                        string questionName = liExamReSult[i]._QUESTIONGROUPCODE.NAME;
                        if (!string.IsNullOrEmpty(questiongroupcode))
                        {
                            totalMark += liExamReSult[i].MARK;
                            liExamReSult[i].QUESTIONGROUPCODE = "";

                            for (int j = i + 1; j < liExamReSult.Count; j++)
                            {
                                if (liExamReSult[j].QUESTIONGROUPCODE == questiongroupcode)
                                {
                                    totalMark += liExamReSult[j].MARK;
                                    liExamReSult[j].QUESTIONGROUPCODE = "";
                                }
                            }
                        }
                        if (!string.IsNullOrEmpty(questiongroupcode))
                        {
                            Question question = new Question
                            {
                                QuestionGroupCode = questiongroupcode,
                                Mark = totalMark,
                                Name = questionName
                            };
                            liQuestion.Add(question);
                        }

                    }
                    exam.ListQuestion = liQuestion;
                    liExam.Add(exam);
                    examresultBus.CloseConnection();
                }
            }

            bus.CloseConnection();
            return Json(new { data = liExam }, JsonRequestBehavior.AllowGet);
        }
    }

    public class QuestionAnswer
    {
        public string MaCauHoi { get; set; }
        public string MaCauTl { get; set; }
        public string Type { get; set; }
    }

    public class Question
    {
        public string Name { get; set; }
        public string QuestionGroupCode { get; set; }
        public double Mark { get; set; }
    }

    public class Exam
    {
        public string Name { get; set; }
        public string ExamHallStudentCode { get; set; }
        public List<Question> ListQuestion { get; set; }

    }

}