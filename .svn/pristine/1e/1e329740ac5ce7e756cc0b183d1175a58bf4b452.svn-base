using System;
using System.Collections.Generic;
using System.Diagnostics.Eventing.Reader;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using IS.Sess;
using IS.uni;
using IS.fitframework;
using IS.Config;
using Newtonsoft.Json;
using System.Web.Script.Serialization;
using IS.Lang;
using System.Dynamic;

namespace nerp.Controllers.core
{
    public class SubjectContentController : Controller
    {
        // GET: SubjectContent
        session _ses = new session();
        public ActionResult Index(string id)
        {
            dynamic defaultobject = new ExpandoObject();
            defaultobject.defaulttab = id;
            defaultobject.thetype = _ses.loginType;
            ViewBag.defaultvalue = JsonConvert.SerializeObject(defaultobject);
            string[] jsx = {
                "/Scripts/reactselect/prop-types.js"
                ,"/Scripts/reactselect/react-input-autosize.js"
                ,"/Scripts/reactselect/classname.js"
                ,"/Scripts/reactselect/react-select.js"
                ,"/Jsx/_Shared/Tree.jsx"
                ,"/Scripts/Ag-grid/ag-grid.js"
                ,"/Jsx/_Shared/SearchDialog.jsx"
                ,"/Jsx/_Shared/Combobox.jsx"
                ,"/Jsx/_Shared/Combobox3.jsx"
                ,"/jsx/Core/SubjectContent/Subjectcontentpopup.jsx"
                ,"/jsx/_shared/AgGrid.jsx"
                ,"/Jsx/_Shared/ButtonList.jsx"
                ,"/jsx/Core/SubjectContent/Subjectcontentlist.jsx"
                , "/Scripts/tinymce/js/tinymce/init-tinymce.js"
                ,"/Scripts/tinymce/js/tinymce/tinymce.min.js"
                ,"/Scripts/tinymce/js/tinymce/jquery.tinymce.min.js"
                };
            ViewBag.jsx = jsx;
            return View("Adminindex");//Lấy index mặc định trong share
        }
        public JsonResult getAllSearch(int page, int pageSize, string subjectcode, string parentcode, string code, bool codetype, string name, bool nametype,
                                    string note, bool notetype)
        {
            //mặc định cho phần trang
            if (pageSize == 0)
            {
                pageSize = AppConfig.item4page();
            }
            if (page < 1)
            {
                page = 1;
            }
            //Khai báo lấy dữ liệu
            SUBJECTCONTENT_BUS bus = new SUBJECTCONTENT_BUS();
            List<fieldpara> lipa = new List<fieldpara>();
           
            lipa.Add(new fieldpara("SUBJECTCODE", subjectcode, 0));

            lipa.Add(new fieldpara("PARENTCODE", parentcode , 0));
               
            if (!string.IsNullOrEmpty(code))
            {
                lipa.Add(codetype ? new fieldpara("CODEVIEW", code, 0) : new fieldpara("CODEVIEW", code, 1));
            }
            if (!string.IsNullOrEmpty(name))
            {
                lipa.Add(nametype ? new fieldpara("NAME", name, 0) : new fieldpara("NAME", name, 1));
            }
            if (!string.IsNullOrEmpty(note))
            {
                lipa.Add(notetype ? new fieldpara("NOTE", note, 0) : new fieldpara("NOTE", note, 1));
            }
            lipa.Add(new fieldpara("UNIVERSITYCODE", _ses.gUNIVERSITYCODE, 0));
         //   lipa.Add(new fieldpara("LOCK", 0, 0));
            int countpage;
            int totalItem = 0;
            //order by theorder, with pagesize and the page
            var data = bus.getAllBy2("THEORDER", pageSize, page, out countpage, out totalItem, lipa);
            foreach (var item in data)
            {
                item.NOTE = "";
            }
            bus.CloseConnection();
            //Chỉ số đầu tiên của trang hiện tại (đã trừ -1)
            int startpage = (page - 1) * pageSize;
            //get first questiongroup
            // string codefistSubcon = data.Count != 0 ? data[0].CODE : "";
            //Chỉ số đầu tiên của trang hiện tại (đã trừ -1)
            //Trả về cho client
            var groupquestion = "";
            var question = "";
            if (data.Count != 0)
            {
                QUESTIONGROUP_BUS busgroup = new QUESTIONGROUP_BUS();
                List<QUESTIONGROUP_OBJ> li = busgroup.getAllBy2("CODEVIEW",
                      new fieldpara("SUBJECTCODE", subjectcode, 0),
                      new fieldpara("SUBJECTCONTENTCODE", data[0].CODE, 0));
                if (li.Count > 0)
                {
                    groupquestion = li.Count != 0 ? JsonConvert.SerializeObject(li[0]) : "";
                }
                if (li.Count != 0)
                {
                    QUESTION_BUS busquestion = new QUESTION_BUS();
                    List<QUESTION_OBJ> liquestion = busquestion.getAllBy2("CODEVIEW",
                          new fieldpara("QUESTIONGROUPCODE", li[0].CODE, 0));
                    if (liquestion.Count > 0)
                    {
                        question = liquestion.Count != 0 ? JsonConvert.SerializeObject(liquestion[0]) : "";
                    }
                }
            }
            return Json(new
            {
                question,
                groupquestion,
                data, //Danh sách
                lst = data,
                totalItem, //số lượng bản ghi
                totalPage = countpage,
                startindex = startpage, //bắt đầu số trang
                ret = 0 //ok
            }, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetAll(string subjectcode)
        {
            List<SUBJECTCONTENT_OBJ> data = null;
            //Khai báo lấy dữ liệu
            SUBJECTCONTENT_BUS bus = new SUBJECTCONTENT_BUS();

            List<fieldpara> lipa = new List<fieldpara>();
            //  if (!String.IsNullOrEmpty(subjectcode))
            lipa.Add(new fieldpara("SUBJECTCODE", subjectcode, 0));
            lipa.Add(new fieldpara("UNIVERSITYCODE", _ses.gUNIVERSITYCODE, 0));
            //order by theorder, with pagesize and the page
            data = bus.getAllBy2("THEORDER", lipa.ToArray());
            foreach (var item in data)
            {
                item.NOTE = "";
            }
            bus.CloseConnection();
            var ret = data != null ? 1 : -1;
            //Trả về client
            var a = JsonConvert.SerializeObject(data);
            return Json(new
            {
                lst = data, //Danh sách
                data2 = a,
                ret = ret
            }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetByCode(string code)
        {
            var ret = -1;
            SUBJECTCONTENT_BUS bus = new SUBJECTCONTENT_BUS();
            var data = bus.GetByID(new SUBJECTCONTENT_OBJ.BusinessObjectID(code));
            if (data != null)
                ret = 0;
            return Json(new {ret = ret, data = data}, JsonRequestBehavior.AllowGet);
        }
        public JsonResult CheckCodeViewExit(string code, string codeview)
        {
            int ret;
            SUBJECTCONTENT_BUS bus = new SUBJECTCONTENT_BUS();
            SUBJECTCONTENT_OBJ obj = null;
            if (!string.IsNullOrEmpty(code))
            {
                //check for update
                obj = bus.GetByKey(new fieldpara("CODEVIEW", codeview, 0),
                                           new fieldpara("UNIVERSITYCODE", _ses.gUNIVERSITYCODE, 0));

                if (obj == null)
                {
                    //change codeview
                    ret = 1;
                }
                else
                {
                    //change other feature,not codeview 
                    ret = (code == obj.CODE) ? 1 : -1;
                }

            }
            else
            {

                obj = bus.GetByKey(new fieldpara("CODEVIEW", codeview, 0),
                                           new fieldpara("UNIVERSITYCODE", _ses.gUNIVERSITYCODE, 0));
                ret = (obj == null) ? 1 : -1;
            }
            bus.CloseConnection();
            return Json(new { sussess = ret }, JsonRequestBehavior.AllowGet);
        }

        [ValidateInput(false)]
        [HttpPost]
        public JsonResult Update(SUBJECTCONTENT_OBJ obj)
        {

            SUBJECTCONTENT_BUS bus = new SUBJECTCONTENT_BUS();
            //kiểm tra tồn tại cho trường hợp sửa
            SUBJECTCONTENT_OBJ objTemp;
            int ret = 0;
            int add = 0;

            objTemp = !string.IsNullOrEmpty(obj.CODE)
                ? bus.GetByID(new SUBJECTCONTENT_OBJ.BusinessObjectID(obj.CODE))
                : new SUBJECTCONTENT_OBJ();

            if (ret < 0)
            {
                //đóng kết nối trước khi trả về
                bus.CloseConnection();
                //ban ghi sửa đã bị xóa
                return Json(new { sussess = ret }, JsonRequestBehavior.AllowGet);

            }
            //hết kiểm tra tồn tại bản ghi
            objTemp.EDITTIME = DateTime.Now; //Thời điểm sủa bản ghi
            objTemp.EDITUSER = _ses.loginCode; //Người sửa bản ghi
            objTemp.CODEVIEW = obj.CODEVIEW;
            objTemp.NAME = obj.NAME;
            objTemp.LOCK = obj.LOCK;
            objTemp.NOTE = obj.NOTE;
            objTemp.THEORDER = obj.THEORDER;
            objTemp.PARENTCODE = obj.PARENTCODE;
            if (obj.PARENTCODE == null)
                objTemp.PARENTCODE = "";
            objTemp.CONTENTTYPE = obj.CONTENTTYPE;
            objTemp.SUBJECTCODE = obj.SUBJECTCODE;
            objTemp.UNIVERSITYCODE = _ses.gUNIVERSITYCODE;
            
            objTemp.LANG = _ses.getLang();
            List<string> listSourcePath = _ses.tSOURCEPATHSESSION;
            List<string> listDestinationPath = _ses.tDESTINATIONPATHSESSION;
            if (objTemp.NOTE != null && listDestinationPath != null)
            {
                for (int i = 0; i < listSourcePath.Count; i++)
                {
                    if (objTemp.NOTE.Contains((listSourcePath[i])))
                        objTemp.NOTE = objTemp.NOTE.Replace(listSourcePath[i], listDestinationPath[i]);
                }
            }
            //Kiểm tra tình trạng sửa hay là thêm mới
            if (string.IsNullOrEmpty(obj.CODE))
            {
                //Thêm mới
                add = 1;
                //Sinh mã
                objTemp.CODE = bus.genNextCode(obj);

                objTemp.LOCKDATE = DateTime.Now;
            }
            if (add == 1)
            {
                ret = bus.insert(objTemp);
            }
            else
            {
                //gán _ID để xác định bản ghi sẽ được cập nhật
                objTemp._ID.CODE = obj.CODE;
                ret = bus.update(objTemp);
            }

            if (ret < 0)
            {
                bus.RollbackTransaction();
            }
            else
            {
                if (_ses.tSOURCEPATHSESSION != null)
                {
                    _ses.tSOURCEPATHSESSION.Clear();
                    _ses.tDESTINATIONPATHSESSION.Clear();
                }
                bus.CommitTransaction();
            }
            bus.CloseConnection();
            return Json(new
            {
                node = objTemp,
                ret = ret,
                code = objTemp.CODE
            }, JsonRequestBehavior.AllowGet);

        }
        public JsonResult Delete(List<string> code)
        {
            var ret = 0;
            var error = false;
            if (code != null)
            {
                var bus = new SUBJECTCONTENT_BUS();
                for (var i = 0; i < code.Count; i++)
                {
                    if (code[i] != null)
                    {
                        var item = bus.GetByID(new SUBJECTCONTENT_OBJ.BusinessObjectID(code[i]));
                        if (item == null)
                        {
                            ret = -1;
                            error = true;
                            continue;
                        }
                        if (item.UNIVERSITYCODE != _ses.gUNIVERSITYCODE)
                        {
                            ret = -4;
                        }
                        if (ret >= 0)
                        {
                            ret = bus.delete(item._ID);
                        }
                        if (!error && ret < 0)
                        {
                            error = true;
                        }
                    }
                }
                bus.CloseConnection();
            }

            ret = error ? -1 : 0;
            return Json(new
            {
                ret = ret
            }, JsonRequestBehavior.AllowGet);

        }
        public JsonResult Listcombo(string subjectcode)
        {
            //Kiểm tra phân quyền
            List<SUBJECTCONTENT_OBJ> li;
            //Lây dữ iệu
            SUBJECTCONTENT_BUS bus = new SUBJECTCONTENT_BUS();
            List<fieldpara> lipa = new List<fieldpara>();
            //Lọc đơn vị cấp trên; '' sẽ là không co đơn vị cấp trên
            lipa.Add(new fieldpara("LOCK", 0, 0));
            lipa.Add(new fieldpara("UNIVERSITYCODE", _ses.gUNIVERSITYCODE, 0));
            if (subjectcode != "")
            {
                lipa.Add(new fieldpara("SUBJECTCODE", subjectcode, 1));
            }
            //order by theorder, with pagesize and the page
            li = bus.getAllBy2(" NAME ", lipa.ToArray());
            var count = li.Count;
            var ret = count > 0 ? 1 : -1;
            bus.CloseConnection();
            //get first

            //   string codefistSubcon = li.Count != 0 ? li[0].CODE : "";
            //Chỉ số đầu tiên của trang hiện tại (đã trừ -1)
            //Trả về cho client
            return Json(new
            {
                //   codefistSubcon= codefistSubcon,
                data = li,
                ret = ret
            },
                JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetById(string id)
        {
            SUBJECTCONTENT_OBJ obj = null;
            if (!string.IsNullOrEmpty(id))
            {
                SUBJECTCONTENT_BUS bus = new SUBJECTCONTENT_BUS();
                obj = bus.GetByID(new SUBJECTCONTENT_OBJ.BusinessObjectID(id));
            }
            return Json(new { data = obj }, JsonRequestBehavior.AllowGet);
        }
        /// <summary>
        /// lấy danh sách các subjectcontent trực tiếp của parentcode
        /// </summary>
        /// <param name="parentCode">mã subjectcontent cha</param>
        /// <returns></returns>
        public JsonResult GetListSub(string parentCode)
        {
            SUBJECTCONTENT_BUS bus = new SUBJECTCONTENT_BUS();
            var li = bus.getAllBy2("CODE", new fieldpara("UNIVERSITYCODE", _ses.gUNIVERSITYCODE, 0),
                                                new fieldpara("PARENTCODE", parentCode, 0));
            return Json(new { data = li }, JsonRequestBehavior.AllowGet);
        }
    }
}