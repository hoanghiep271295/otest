using System;
using System.Collections.Generic;
using System.Net;
using System.Web.Mvc;
using IS.Config;
using IS.fitframework;
using IS.localcomm;
using IS.Lang;
using IS.Sess;
using IS.uni;
using Newtonsoft.Json;
namespace nerp.Controllers.core
{
    public class TestStructDetailController : Controller
    {
        session ses = new session();
        localcommonlib com = new localcommonlib();
        // GET: TestStructDetail
        public JsonResult getAllSearch(int page, int pageSize, string teststructcode, string code, bool codetype, string name, bool nametype,
                                   string note, bool notetype)
        {
            List <TESTSTRUCTDETAIL_OBJ> li;
            //mặc định cho phần trang
            if (pageSize == 0)
            {
                pageSize = AppConfig.item4page();
            }
            if (page < 1)
            {
                page = 1;
            }
            //Khai báo lấy dữ liệu
            TESTSTRUCTDETAIL_BUS bus = new TESTSTRUCTDETAIL_BUS();
            List<fieldpara> lipa = new List<fieldpara>();
            lipa.Add(new fieldpara("TESTSTRUCTCODE", teststructcode, 0));
            if (!string.IsNullOrEmpty(code))
            {
                lipa.Add(codetype ? new fieldpara("CODEVIEW", code, 0) : new fieldpara("CODEVIEW", code, 1));
            }
            if (!string.IsNullOrEmpty(name))
            {
                lipa.Add(nametype ? new fieldpara("NAME", name, 0) : new fieldpara("NAME", name, 1));
            }
            if (!string.IsNullOrEmpty(note))
            {
                lipa.Add(notetype ? new fieldpara("NOTE", note, 0) : new fieldpara("NOTE", note, 1));
            }
            int countpage;
            int totalItem = 0;
            //order by theorder, with pagesize and the page
            var data = bus.getAllBy2("CODE", pageSize, page, out countpage, out totalItem, lipa);
            //Chỉ số đầu tiên của trang hiện tại (đã trừ -1)
            int startpage = (page - 1) * pageSize;
            return Json(new
            {
                lst = data,//Danh sách
                totalItem = totalItem, // số lượng tất cả các bản ghi
                totalPage = countpage, // số lượng trang
                startindex = startpage,//bắt đầu số trang
                ret = 0//ok
            }, JsonRequestBehavior.AllowGet);
        }
        /// <summary>
        /// sử dụng để hiển thị lên tên và số câu hỏi, tổng điểm
        /// mục đích là để đổi tên
        /// </summary>
        /// <param name="testStructCode"></param>
        /// <param name="subjectCode"></param>
        /// <returns></returns>
        public JsonResult GetList2(string testStructCode, string subjectCode)
        {
            // get danh sách subjectcontent
            SUBJECTCONTENT_BUS busSubjectcontent = new SUBJECTCONTENT_BUS();
            var liSubjectContent = busSubjectcontent.getAllBy2(new fieldpara("SUBJECTCODE", subjectCode, 0),
                                                                    new fieldpara("UNIVERSITYCODE", ses.gUNIVERSITYCODE, 0));
           // var listTestStructDetail = getDetailByTestStruct(testStructCode);
            foreach (var item in liSubjectContent)
            {
                var testStructDetail = getTestStructDetail(testStructCode, item.CODE);
                if (testStructDetail != null)
                {
                    int amount = testStructDetail.AMOUNT;
                    double totalMark = testStructDetail.TOTALMARK;
                    if (amount != 0 || totalMark != 0)
                    {
                        string name = item.NAME + "(" + amount + "-" + totalMark + ")";
                        item.NAME = name;
                    }
                    
                }
                //else
                //    item.NAME = item.NAME + "(0 - 0)";

            }
            return Json(new {data = liSubjectContent}, JsonRequestBehavior.AllowGet);
        }
        /// <summary>
        ///  
        /// </summary>
        /// <param name="teststructcode"></param>
        /// <returns>trả về list</returns>
        public List<TESTSTRUCTDETAIL_OBJ> getDetailByTestStruct(string teststructcode)
        {
            List<TESTSTRUCTDETAIL_OBJ> data = null;
            TESTSTRUCTDETAIL_BUS bus = new TESTSTRUCTDETAIL_BUS();
            List<fieldpara> lipa = new List<fieldpara>();
            lipa.Add(new fieldpara("TESTSTRUCTCODE", teststructcode, 0));
            lipa.Add(new fieldpara("UNIVERSITYCODE", ses.gUNIVERSITYCODE, 0));
            data = bus.getAllBy2("CODE", lipa.ToArray());
            bus.CloseConnection();
            return data;
        }

        public TESTSTRUCTDETAIL_OBJ getTestStructDetail(string testStructCode, string subjectContentCode)
        {
            TESTSTRUCTDETAIL_BUS bus = new TESTSTRUCTDETAIL_BUS();
            List<fieldpara> lipa = new List<fieldpara>();
            lipa.Add(new fieldpara("TESTSTRUCTCODE", testStructCode, 0));
            lipa.Add(new fieldpara("SUBJECTCONTENTCODE", subjectContentCode, 0));
            lipa.Add(new fieldpara("UNIVERSITYCODE", ses.gUNIVERSITYCODE, 0));
            var data = bus.GetByKey(lipa.ToArray());
            bus.CloseConnection();
            return data;
        }

        public JsonResult GetTestStructDetailJson(string testStructCode, string subjectContentCode)
        {
            var data = getTestStructDetail(testStructCode, subjectContentCode);
            return Json(new {data = data}, JsonRequestBehavior.AllowGet);
        }
    }
}