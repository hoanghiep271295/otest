using IS.Config;
using IS.fitframework;
using IS.Sess;
using IS.uni;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace nerp.Controllers.core
{
    public class NationController : Controller
    {
        session ses = new session();
        public ActionResult Index(string id)
        {
            //"/Jsx/_Shared/Tree.jsx"
            //chọn mặc định một cái menu nào đó
            string defaultvalue = "{\"code\":\"" + id+ "\", \"subcode\":\"345\", \"thedate\":\"2017-2-3\"}";
            ViewBag.defaultvalue = defaultvalue;
            string[] jsx = {
                "/Scripts/Ag-grid/ag-grid.js"
                ,"/Jsx/_Shared/SearchDialog.jsx"
                ,"/Jsx/_Shared/Combobox.jsx"
                ,"/Jsx/_Shared/Combobox3.jsx"
                ,"/jsx/_shared/AgGrid.jsx"
                ,"/Jsx/_Shared/ButtonList.jsx"
                ,"/jsx/Core/Nation/Nationpopup.jsx"
                ,"/jsx/Core/Nation/Nationlist.jsx"
                };
            ViewBag.jsx = jsx;
            return View("Adminindex");//Lấy index mặc định trong share
        }

        //public JsonResult getAll(string thetype)
        //{
        //    List<ARMYRANK_OBJ> li = null;
        //    //Khai báo lấy dữ liệu
        //    ARMYRANK_BUS bus = new ARMYRANK_BUS();
        //    List<fieldpara> lipa = new List<fieldpara>();

        //    lipa.Add(new fieldpara("UNIVERSITYCODE", ses.gUNIVERSITYCODE, 0));
        //    lipa.Add(new fieldpara("THETYPE", thetype));
        //    //order by theorder, with pagesize and the page
        //    li = bus.getAllBy2(" THEORDER ", lipa.ToArray());
        //    bus.CloseConnection();
        //    //li = li.Skip((page - 1) * pageSize).Take(pageSize).ToList();
        //    return Json(new
        //    {
        //        lst = li,//Danh sách
        //        ret = 0//ok
        //    }, JsonRequestBehavior.AllowGet);
        //}

        public JsonResult getAllSearch(string name, string nametype, string note, string notetype)
        {
            List<NATION_OBJ> li = null;

            //Khai báo lấy dữ liệu
            NATION_BUS bus = new NATION_BUS();
            List<fieldpara> lipa = new List<fieldpara>();
            if (!string.IsNullOrEmpty(name))
            {
                lipa.Add(new fieldpara("NAME", name, (int)(nametype.ToUpper() == "TRUE" ? searchType.NONE : searchType.LIKE)));
            }
            if (!string.IsNullOrEmpty(note))
            {
                lipa.Add(new fieldpara("NOTE", note, (int)(notetype.ToUpper() == "TRUE" ? searchType.NONE : searchType.LIKE)));
            }
            //order by theorder, with pagesize and the page
            li = bus.getAllBy2(" CODEVIEW ", lipa.ToArray());
            bus.CloseConnection();
            //li = li.Skip((page - 1) * pageSize).Take(pageSize).ToList();
            return Json(new
            {
                lst = li,//Danh sách
                ret = 0//ok
            }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult delete(List<string> code)
        {
            int ret = 0;
            NATION_BUS bus = new NATION_BUS();
            List<NATION_OBJ.BusinessObjectID> li_del = new List<NATION_OBJ.BusinessObjectID>();
            foreach (string item in code)
            {
                li_del.Add(new NATION_OBJ.BusinessObjectID(item));
            }
            //ok
            if (ret >= 0)
            {
                ret = bus.DeletetMultiItems(li_del);
                if (ret >= 0)
                {
                    bus.CommitTransaction();
                }
                else
                {
                    bus.RollbackTransaction();
                }
            }

            bus.CloseConnection();

            return Json(new { ret = ret }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult update(NATION_OBJ obj)
        {
            List<string> li_ref = new List<string>();// danh sach file sẽ được thêm vào
            List<string> li_refd = new List<string>();// sanh sách file bị xoá đi

            NATION_BUS bus = new NATION_BUS();
            int ret = 0;
            int add = 0;

            NATION_OBJ obj_temp = null;
            //kiểm tra tồn tại cho trường hợp sửa
            if (!string.IsNullOrEmpty(obj.CODE))//edit
            {
                obj_temp = bus.GetByID(new NATION_OBJ.BusinessObjectID(obj.CODE));
                if (obj_temp == null )
                {
                    ret = -4;
                }
            }
            else
            {
                obj_temp = new NATION_OBJ();
            }

            if (ret < 0)
            {
                //đóng kết nối trước khi trả về
                bus.CloseConnection();
                //ban ghi sửa đã bị xóa
                return Json(new { sussess = ret }, JsonRequestBehavior.AllowGet);

            }
            //hết kiểm tra tồn tại bản ghi
            obj_temp.EDITTIME = DateTime.Now;//Thời điểm sủa bản ghi
            obj_temp.EDITUSER = ses.loginCode;//Người sửa bản ghi
            obj_temp.CODEVIEW = obj.CODEVIEW;
            obj_temp.NAME = obj.NAME;
            obj_temp.NOTE = obj.NOTE;
            obj_temp.LOCK = obj.LOCK;
            //Kiểm tra tình trạng sửa hay là thêm mới
            if (string.IsNullOrEmpty(obj.CODE))
            {
                //Thêm mới
                add = 1;
                //Sinh mã
                obj_temp.CODE = bus.genNextCode(obj);
                obj_temp.LOCK = 0;
                obj_temp.LOCKDATE = DateTime.Now;
                //obj_temp.MODULECODE = "CORE";//for this
            }
            
            if (add == 1)
            {
                ret = bus.insert(obj_temp);
            }
            else
            {
                //gán _ID để xác định bản ghi sẽ được cập nhật
                obj_temp._ID.CODE = obj.CODE;
                ret = bus.update(obj_temp);
            }
           
            if (ret >= 0)
            {
                bus.CommitTransaction();

            }
            else
            {
                bus.RollbackTransaction();
            }
            bus.CloseConnection();
            //some thing like that
            return Json(new { ret = ret, CODE = obj_temp.CODE }, JsonRequestBehavior.AllowGet);
        }
    }
}