/**
 * Quy tắc đặt tên
 *Cung cấp ra ngoài các hàm: 
 * ClearInput(obj): Xóa các text box - được gọi từ cha
 * SetInput(obj): Thiết lập thông tin trên các ô text tương ứng - được gọi từ cha
 * ReloadData(): callback function được gán từ cha vào để cập nhật lại thông tin của cha nếu cần thiết
 */
var CourseRegisterPopup = React.createClass({
    getInitialState: function() {
        return {
            agGrid: { setRowData: null, getDataChange: null, setNextRow: null, setPrevRow: null },
            rowSelect: null,
            columnDefs: [
                { headerName: "Mã sinh viên", field: "CODEVIEW", width: 100, editable: false },
                { headerName: "Tên sinh viên", field: "NAME", width: 350, editable: false },
                { headerName: "Số điện thoại", field: "PHONE", width: 100, editable: false },
                { headerName: "Email", field: "EMAIL", width: 200, align: 'center', editable: false }
            ],
            listStudentNotRegisted: [],
            listClass: [],
            listGrade: []
        };
    },
    initAgGrid: function(setRowData, getDataChange, setNextRow, setPrevRow, setSelect) {
        var agGrid = {
            setRowData: setRowData,
            getDataChange: getDataChange,
            setNextRow: setNextRow,
            setPrevRow: setPrevRow,
            setSelect: setSelect
        };
        this.setState({ agGrid: agGrid });
    },
    componentWillMount: function() {
        //Load các thông tin về danh mục các thứ khác nếu cần hiết
    },
    componentDidMount: function() {
        this.setState({ popup: this.refs[this.props.id + '_Popup'] });
     //   this.getListStudentUnRegisted();
    },
    onRowSelect : function(itemSelect) {
        if (!!itemSelect && itemSelect.length > 0) {
            this.setState({ rowSelect: itemSelect });
        }
    }
    ,
    loadData: function () {
        var classcode = "1709290001";
        var gradecode = "";
        $.ajax({
            url: '/StudentRegisCourse/LoadListStudentNotRegisted',
            type: 'POST',
            traditional :true,
            data: {
                  classCode: classcode
                , gradeCode: gradecode
                , coursecode: codetype
            },
            dataType: 'json',    
            success: function (data) {
                if (data.ret >= 0) {
                    this.state.agGrid.setRowData(data.lst);                   
                }
            }.bind(this),
            error: function (xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    Show: function () {
        $('#' + this.props.id).modal('show');
    },
    /**
    *Ẩn form hiện tại
    */
    Hide: function () {
        $('#' + this.props.id).modal('hide');
    },
    /**
    *hàm được gọi để xóa dữ liệu trên form cho phép thêm mới; được gọi bởi component có component này (list)
    */
    /**
    *hàm được gọi để xóa dữ liệu trên form cho phép thêm mới; được gọi bởi component có component này (list)
    */
    ClearInput:function(obj){
        this.refs.subjectcontent_popup_parentcode.value = obj.PARENTCODE;
        this.ClearThing();//clear
    },
    /**
    *thực tế xóa trên form
    */
    ClearThing:function()
    {

    },
    /**
    *Hàm gán dữ liệu để sửa, được gọi bởi component cha của component này
    *para obj: thông tin về dữ liệu được thay đổi
    */
    SetInput: function () {
        //Set status
        this.refs[this.props.id + "_status"].innerHTML = 'edit';
    },

    /**
   *Kiểm tra để gọi load lại cho dữ liệu từ component cha (danh sách)
   *para obj: là mã của bản ghi mới được thao tác
   */
    ReloadData: function (obj) {
        var subjectcode = this.props.parent.getKeyValue('comboGrade');
        if (isMiss(this.props.ReloadData)) {
            //console.log('Call load data');
            return false;
        }
        else {
            //console.log('Call load data!!!!!!!!!!!!!');
            this.props.ReloadData(subjectcode, obj);
            return true;
        }
    },
    /**
    *gọi khi bấm nút ghi
    */
    SaveClick: function ()
    {
        this.SaveData(true);
    },
    /**
    *gọi khi bấm nút ghi và tạo mới
    */
    SaveContinueClick: function () {
        this.SaveData(false);
    },
    /**
     *Thực tế ghi dữ liệu
   *para isClose xác định sau khi ghi xong sẽ đóng form, hay là tiếp tục tạo mới
   */
    SaveData: function (isClose) {
    //    var subjectcode = this.props.parent.getKeyValue('comboGrade');

        //Add or edit 1 item
        $.ajax({
            url: "/StudentRegisCourse/Update",
            type: 'POST',
            data: null,
            dataType: 'json',
            success: function (data) {
                if (data.ret >= 0) {
                    if (isClose) {
                        this.Hide();
                    }
                    else {
                        this.ClearThing();
                    }
                    this.ReloadData(data.code);

                }
                else {
                    bootbox.alert('Lỗi ghi dữ liệu');
                }
            }.bind(this),
            error: function (xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });

    },
    render: function () {
        var id = this.props.id;
        //var arr3 = [
        //    { id: "1", title: "Khong", parent: '' }, 
        //    { id: "2", title: "Có không", parent: '' },
        //    { id: "4", title: "Có 1", parent: '1' },
        //    { id: "5", title: "Có 11", parent: '4' },
        //    { id: "6", title: "Có 12", parent: '4' }
        //];
        //var mapping = {id :'id', text :'title',parent:'parent',idext:'id'}
        return (
                <div className="modal fade" id={id} ref={id} role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                  <div className="modal-dialog">
                    <div className="box box-info">
                      <div className="modal-header with-border">
                        <button type="button" className="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span className="sr-only">Close</span></button>
                        <h4 className="modal-title" id={id+"_form_title"} ref={id+"_form_title"} >Thêm bài học</h4>
                          <input type="hidden" id="subjectcontent_popup_parentcode" ref="subjectcontent_popup_parentcode" />{/*Lưu lại mã code của cha hiện tại*/}    
                      </div>
                      <div className="modal-body">
                   
                            <div className="form-group">
                                <label  className="col-sm-2 control-label">Chọn lớp </label>
                                 <div className="col-sm-10">
                                  {/*  <DropdownTree title='Thử tý' id='dropme' lst={arr3} onSelect={this.ComboOnSelect} onCheck={this.ComboOnCheck} onExpand={this.ComboOnExpand} check={true} selectChildren={true} mapper={mapping} ref='dropme'/>*/} 
                                  </div>
                                </div>
                   <div id={this.props.id+'_grid'} className="ag-fresh customgrid">
                          </div>
                                <AgGrid container={this.props.id+'_grid'}
                                     initAgGrid={this.initAgGrid}
                                     loadData={this.loadData}
                                     onRowSelect={this.onRowSelect}
                                     columnDefs={this.state.columnDefs}
                                     headerCheckBox={true}>
                                     </AgGrid>
                     
                      </div>
             <div className="box-footer modal-footer">{/*Phần dành để hiển thị trạng thái - không thay đổi*/}
                <span className="label label-warning" style={{float:'left'}} id={id+"_status"} ref={id+"_status"}>i</span>
                <button type="button" className="btn btn-primary" onClick={this.SaveClick}><i className="fa fa-floppy-o"></i> Ghi</button>
                <button type="button" className="btn btn-primary" onClick={this.SaveContinueClick}><i className="fa fa-plus-circle"></i> Ghi và thêm mới</button>
                <button type="button" className="btn btn-default " data-dismiss="modal"><i className="fa fa-sign-out"></i>Thoát</button>
             </div>

                    </div>
                  </div>
                </div>
            );
}
});


