var ExamResult = React.createClass({
    getInitialState: function () {
        return {
            listGroupQuesion: [],// list groupcode
            listQuestion: [],/// list question
            listAnswer: [],///list answer follow question
            objHalltudent: null, ///object Hall student
            objExamForm: null, /// Objet Exam Form
            listExamDetail: [], ///list ExamFromdetail
            listAnswerStudent: [], ///list answer of student get from server
            numberQuestion: 0
        }
    },
    componentWillMount: function ()
    {
    },
    componentDidMount: function ()
    {
        this.loadData();
    },
    loadData: function () {
        var defaultvalue = window.getDefaultFromServer();
        var markcode = defaultvalue.markcode;
        var examtimecode = defaultvalue.examtimecode;
        $.ajax({
            url: "/ExamResult/ShowExamResult",
            dataType: 'json',
            data: {
                markcode: markcode,
                examtimecode: examtimecode
            },
            success: function (data) {
                if (data.ret >= 0) {
                    this.setState({
                        listGroupQuesion: data.liQuestiongroup,
                        listQuestion: data.li_question,
                        listAnswer: data.li_answer,
                        objHalltudent: data.ObjexamHallstudent,
                        objExamForm: data.ObjexamForm,
                        listExamDetail: data.liExamformDetail,
                        listAnswerStudent : data.li_examresult,
                        numberQuestion: data.numberQuestion
                    });
                }
            }.bind(this),
            error: function (xhr, status, err) {
                console.log(err.toString());
            }
        });
    },
    render: function () {
        var listQgroup = [];
        var index = 0;
        var that = this;
    ///    debugger
        this.state.listGroupQuesion.forEach(function (rowitem) {
            index++;
            var type = rowitem._QUESTIONTYPECODE.CODEVIEW;
            switch (type) {
                case 'MC':
                    listQgroup.push(<QuestionGroupMC
                                                    key={index}
                                                    number={index}
                                                    ident={rowitem.CODE}
                                                    objQuestionGroup={rowitem.CONTENT}
                                                    dataQuestion={that.state.listQuestion}
                                                    dataAnswer={that.state.listAnswer}
                                                    listAnswerStudent= {that.state.listAnswerStudent}
                                                    questiontype={type} 
                                                   />);
            break;
                case 'WR':
              listQgroup.push(<WritingAnswer    
                                key={index}
                                number={index}
                                ident={rowitem.CODE}
                                objQuestionGroup={rowitem}
                                dataQuestion={that.state.listQuestion}
                                dataAnswer={that.state.listAnswer}
                                listAnswerStudent= {that.state.listAnswerStudent}
                                questiontype={"WR"}  />);
                    break;
                case 'MS':
                  //  debugger
                    listQgroup.push(<QuestionGroupMS 
                                              key={index}
                                                number={index}
                                                ident={rowitem.CODE}
                                                objQuestionGroup={rowitem}
                                                dataQuestion={that.state.listQuestion}
                                                dataAnswer={that.state.listAnswer}
                                                listAnswerStudent= {that.state.listAnswerStudent}
                                                questiontype={type} 
                                 />);
                    break;

                case 'RW':
                    listQgroup.push(<QuestionGroupRW
                                            key={index}
                                            number={index}
                                            ident={rowitem.CODE}
                                            objQuestionGroup={rowitem}
                                            dataQuestion={that.state.listQuestion}
                                            dataAnswer={that.state.listAnswer}
                                            listAnswerStudent= {that.state.listAnswerStudent}
                                            questiontype={type} 
/>);

                    break;

                case 'FI':
                    console.log("FI chưa làm");
                    break;
                case 'FG':
                    console.log("FG chưa làm");
                    break;
                case 'PA':
                    console.log("FG chưa làm");
                    break;
                default:
                    listQgroup.push(<QuestionGroup 
                                                    key={index}
                                                    number={index}
                                                    ident={rowitem.CODE}
                                                    objQuestionGroup={rowitem.CONTENT}
                                                    dataQuestion={that.state.listQuestion}
                                                    dataAnswer={that.state.listAnswer}
                                                    listAnswerStudent= {that.state.listAnswerStudent}
                                                    questiontype={type} 
                                                   />);
                    break;
            }

         });
        return (
                <div className="examform" >
                        {listQgroup}
                  </div>
   
            );
       }
});


//nhóm câu hỏi
var QuestionGroup = React.createClass({
    render: function () {
        var listQuestion = [];
        var index = 0;
        var that = this;
        //duyệt trong danh sách câu hỏi,nếu như câu hỏi nào có mã questriongrop bằng câu hỏi mã questiongroup truyền xuống thì sẽ cho hiển thị trên 1 ô
        this.props.dataQuestion.forEach(function (rowitem) {
            if (rowitem.QUESTIONGROUPCODE === that.props.ident) {
                index++;
                listQuestion.push(<Question key={index}
                                            index={index}
                                            iden={rowitem.CODE}
                                            objQuestion={rowitem}
                                            listanswer={that.props.dataAnswer}
                                            listAnswerStudent= {that.props.listAnswerStudent}
                                            questiontype={that.props.questiontype} />);
            }
        });
            var id = this.props.ident;
            var questiongroup = $("<div/>").html(this.props.objQuestionGroup).text().trim();
            return (
               <div>
                    <div className="container questiongroup">
                <b>{this.props.number}.</b>
                    </div>
                    <div>
                    <div style={{position:'relative'}}>
                        <fieldset className="fieldsetGroup">
                            <div className="divCenter">
                              <span key={'error_'+ id}
                                    dangerouslySetInnerHTML={{ __html: questiongroup}}>
                              </span>
                             </div>
                              <ul>
                            {listQuestion}
                             </ul>
                        </fieldset>
                    </div>
                </div>
            </div>
            );
}
});



var Question = React.createClass({
    //Vì các radio button được gom nhóm bằng name, mà trong đây ta quy định name = quesiontioncode
    //vậy khi 1 radio button được chọn là câu trả lời của sinh viên thì các radio button còn lại sẽ bị disable
    // Nhưng là vì có 2 trường hợp là câu chọn của sinh viên là đúng
    //câu chọn của sinh viên là sai nên cần disable trừ trường hợp đã được chọn
    //trong  1 câu hỏi không thể cùng xảy ra 2 trường hợp được check nên mặc định là disable hết

    ///check answer to show out
    //item here is answer from list answer from table answer
    //arr here is list answer of student from table examresult
    CheckItem: function(item,arr,questioncode) {
        for (var i = 0; i < arr.length; i++) {
            if (this.CheckItemInArray(questioncode, arr)) {
                //kiểm tra xem xem câu trả lời của sinh viên và câu trả lời trong danh sách câu trả lời có cùng mã câu hỏi không
                if (item.QUESTIONCODE === arr[i].QUESTIONCODE && item.QUESTIONGROUPCODE === arr[i].QUESTIONGROUPCODE) {
                    var count = 0;
                    count++;
                    ///this case: this answer is right and it's student's answer too
                    ///mark is glyphicon-ok and radio button will be checked
                    //sau khi radio button được check thì disable tất cả các radio button còn lại
                    if (item.TRUEANSWER === 1 && item.CODE === arr[i].ANSWERCODE) {
                        //nếu vào trường hợp này là câu trả lời là câu trả lời đúng thì cần disable tất cả các radio button còn lại
                        return 1;
                    }
                    ///this case this answer is right and it isn't student's answer
                    ///mark is glyphicon-ok and  radio button will not be checked
                    if (item.TRUEANSWER === 1 && item.CODE !== arr[i].ANSWERCODE) {
                        return 2;
                    }
                    ///this case : this answer is false and it's student's answer
                    ///mark is glyphicon-remove and  radio button will be checked
                    if (item.TRUEANSWER !== 1 && item.CODE === arr[i].ANSWERCODE) {
                        return 3;
                    }
                    ///this case : this case is false and it is'nt student's answer
                    ///mark is glyphicon-remove and  radio button will not be checked
                    if (item.TRUEANSWER !== 1 && item.CODE !== arr[i].ANSWERCODE) {
                        return 4;
                    }
                }
            }
                //đây là trường hợp câu hỏi không được thí sinh làm bài
            else {
                ///this case this answer is right 
                ///mark is glyphicon-ok and  radio button will not be checked
                if (item.TRUEANSWER === 1) {
                    return 2;
                }
                ///this case : this case is false and it is'nt student's answer
                ///mark is glyphicon-remove and  radio button will not be checked
                if (item.TRUEANSWER !== 1 ) {
                    return 4;
                }
            }
        
        }
    },
    //giả sử như sinh viên vẫn chưa nhập câu trả lời cho câu hỏi đó thì công việc của chúng ta là 
    // sẽ hiển thị lên câu đúng sai và không đánh dấu tích vào bất kì đâu cả, giống trường hợp 2 và 4 ở trên
    /**
     * 
     * @param {string} questioncode - mã của câu hỏi trong  danh sách câu trả lời 
     * @param {arrau} arr - mảng câu trả lời của sinh viên listStudentAnswer
     * @returns {boolean} - Kiểm tra xem câu hỏi này đã được kiểm tra hay chưa 
     */
    CheckItemInArray(questioncode, arr) {
        var count = 0;
        for (var i = 0; i < arr.length; i++) {
            if (arr[i].QUESTIONCODE === questioncode) {
                return true;
            }
            count++;
            if (count === arr.length) {
                return false;
            }
        }
    },

    render: function() {
        var listanswer = [];
        var questiontype = this.props.questiontype;
        var that = this;
        switch (questiontype) {
            case 'MC':
                listanswer = (<QuestionGroupMC id={this.props.iden}
                                               listStudentAnswer={this.props.listAnswerStudent}   
                                               />);
                //kết thúc MC
                break;
        //trường hợp 2
        // speaking,recording
         case 'LA':
                  listanswer = (<RecorderAnswer id={this.props.iden} 
                                                ans={that.props.listAnswerStudent}/>);
                  break;
        //trường hợp số 3
             ///writing
            case 'WR':
            var id = 0;
            this.props.listAnswerStudent.forEach(function (rowitem) {
                if (that.props.iden === rowitem.QUESTIONCODE) {
                    listanswer.push(<Writing   key={id}
                id={that.props.iden+'WR'}
                ans={rowitem.ANSWERTEXT}/>
                );
             }
            id++;
        });
                break;
        //trường hợp số 4
         case 'CO':
        //    console.log('trường hợp CO');
        break;
            default:
            //     console.log('chua lam');
            break;
        }
            var index = this.props.index;
            var question = $('<div/>').html(this.props.objQuestion.CONTENT).text();
            return (
               <div>
                   <li style={{'listStyle':'none'}}>
                   <div className="container" style={{width:'100%',margin:'20px'}}>
                   <div className="col-sm-1" style={{'fontWeight':'bold'}}>{this.props.index}.</div>
                        <div className="col-sm-11">
                            <span key={'error_'+ index} dangerouslySetInnerHTML={{ __html: question }}></span>
                        </div>
                    </div>
                    <ul className="list-unstyled flex-container">
                        {listanswer}
                    </ul>
                </li>
            </div>
             );
        }
});



var RecorderAnswer = React.createClass({
    componentDidMount: function () {
    },
    getFile:function(id, lst)
    {
        if(!!lst)
        {
            return '';
        }
        var i;
        for(i=0 ; i< lst.length; i++)
        {
            if( id===lst[i].QUESTIONCODE)
            {
                return lst[i].ANSWERFILE;
            }
        }
        return '';
    },
    render: function () {
        var index = this.props.id;
        var ans = this.props.ans;
        var thefile = this.getFile(index, ans);
        return (
            <div className="flex-item" style={{ width:'auto', margin:'auto'}}>
                <video controls autoPlay>
                <source src={thefile} type="video/mp4"/>
                    Chưa có file
                </video>
            </div>
            );
}
});

ReactDOM.render(<ExamResult />, document.getElementById('container'));