using IS.Config;
using IS.fitframework;
using IS.Sess;
using IS.uni;
using nerp.Controllers.core;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Web.Mvc;

namespace nerp.Controllers.exam
{
    public class ExamFormController : Controller
    {
        // GET: ExamForm
        private readonly session _ses = new session();

        public JsonResult GetList(int page, int pageSize, string codeView, bool typeCodeView, string name, bool typeName,
                                   string note, bool typeNote, string examTimeCode, string subjectCode)
        {
            //mặc định cho phần trang
            if (pageSize == 0)
            {
                pageSize = AppConfig.item4page();
            }
            if (page < 1)
            {
                page = 1;
            }
            //Khai báo lấy dữ liệu
            EXAMFORM_BUS bus = new EXAMFORM_BUS();
            List<fieldpara> lipa = new List<fieldpara>
            {
                new fieldpara("SUBJECTCODE", subjectCode, 0),
                new fieldpara("EXAMTIMECODE", examTimeCode, 0)
            };
            if (!string.IsNullOrEmpty(codeView))
            {
                lipa.Add(typeCodeView ? new fieldpara("CODEVIEW", codeView, 0) : new fieldpara("CODEVIEW", codeView, 1));
            }
            if (!string.IsNullOrEmpty(name))
            {
                lipa.Add(typeName ? new fieldpara("NAME", name, 0) : new fieldpara("NAME", name, 1));
            }
            if (!string.IsNullOrEmpty(note))
            {
                lipa.Add(typeNote ? new fieldpara("NOTE", note, 0) : new fieldpara("NOTE", note, 1));
            }
            lipa.Add(new fieldpara("UNIVERSITYCODE", _ses.gUNIVERSITYCODE, 0));
            int countpage;
            int totalItem;
            //order by theorder, with pagesize and the page
            var li = bus.getAllBy2("NAME", pageSize, page, out countpage, out totalItem, lipa);
            bus.CloseConnection();
            //Trả về client
            var a = JsonConvert.SerializeObject(li);
            return Json(new
            {
                data = li,//Danh sách
                data2 = a,
                totalItem, // số lượng tất cả các bản ghi
                totalPage = countpage, // số lượng trang
                ret = 0//ok
            }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult Delete(List<string> listCode)
        {
            var ret = 0;
            if (listCode == null)
                ret = -1;
            else
            {
                var bus = new EXAMFORM_BUS();
                foreach (string t in listCode)
                {
                    if (t != null)
                    {
                        var item = bus.GetByID(new EXAMFORM_OBJ.BusinessObjectID(t));
                        if (item == null) { ret = -2; continue; }
                        if (ret >= 0)
                        {
                            ret = bus.delete(item._ID);
                        }
                    }
                }
                bus.CloseConnection();
            }
            return Json(new
            {
                ret
            }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult Update(EXAMFORM_OBJ obj)
        {
            EXAMFORM_BUS bus = new EXAMFORM_BUS();
            int ret;
            int add = 0;
            EXAMFORM_OBJ objTemp;
            //kiểm tra tồn tại cho trường hợp sửa
            if (!string.IsNullOrEmpty(obj.CODE))//edit
            {
                objTemp = bus.GetByID(new EXAMFORM_OBJ.BusinessObjectID(obj.CODE));
                if (objTemp == null)
                {
                    ret = -4;
                    bus.CloseConnection();
                    //ban ghi sửa đã bị xóa
                    return Json(new { sussess = ret }, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                objTemp = new EXAMFORM_OBJ();
            }

            //hết kiểm tra tồn tại bản ghi
            objTemp.EDITTIME = DateTime.Now;//Thời điểm sủa bản ghi
            objTemp.EDITUSER = _ses.loginCode;//Người sửa bản ghi
            objTemp.CODEVIEW = obj.CODEVIEW;
            objTemp.NAME = obj.NAME;
            objTemp.SUBJECTCODE = obj.SUBJECTCODE;
            objTemp.EXAMTIMECODE = obj.EXAMTIMECODE;
            objTemp.NOTE = obj.NOTE;
            objTemp.TESTSTRUCTCODE = obj.TESTSTRUCTCODE;
            //Kiểm tra tình trạng sửa hay là thêm mới
            if (string.IsNullOrEmpty(obj.CODE))
            {
                //Thêm mới
                add = 1;
                //Sinh mã
                objTemp.CODE = bus.genNextCode(obj);
                objTemp.LOCKDATE = DateTime.Now;
            }
            if (add == 1)
            {
                ret = bus.insert(objTemp);
            }
            else
            {
                //gán _ID để xác định bản ghi sẽ được cập nhật
                objTemp._ID.CODE = obj.CODE;
                ret = bus.update(objTemp);
            }
            int pagecount = 0;
            int currentpage = 0;
            if (ret >= 0)
            {
                objTemp._ID.CODE = objTemp.CODE;
                ret = bus.checkPage(objTemp._ID, "CODE", AppConfig.item4page(), out pagecount, out currentpage);
            }
            bus.CloseConnection();
            //some thing like that
            return Json(new { ret, pagecount, currentpage }, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Xóa toàn bộ examform và examformdetail theo examtimecode
        /// </summary>
        /// <param name="examTimeCode"></param>
        /// <returns></returns>
        public int DeleteAll(string examTimeCode)
        {
            var ret = 0;
            //get list examform
            EXAMFORM_BUS examformBus = new EXAMFORM_BUS();
            List<EXAMFORM_OBJ> liExamform = examformBus.getAllBy2("CODE", new fieldpara("EXAMTIMECODE", examTimeCode, 0));
            EXAMFORMDETAIL_BUS examDetailBus = new EXAMFORMDETAIL_BUS();
            foreach (var examform in liExamform)
            {
                var liExamFormDetail = examDetailBus.getAllBy2("CODE", new fieldpara("EXAMFORMCODE", examform.CODE, 0));
                foreach (var item in liExamFormDetail)
                {
                    ret = examDetailBus.delete(item._ID);
                    if (ret < 0)
                        return ret;
                }
                examformBus.delete(examform._ID);
                if (ret < 0)
                    return ret;
            }
            return ret;
        }

        /// <summary>
        /// tạo đề thi cho một đợt thi
        /// </summary>
        /// <param name="examTimeCode"></param>
        /// <param name="testStructCode"></param>
        public ArrayList CreateExamForm(string examTimeCode, string testStructCode)
        {
            ArrayList result = new ArrayList();
            string code = "";
            // xóa toàn bộ đề thi cũ
            var ret = DeleteAll(examTimeCode);
            if (ret >= 0)
            {
                // get examtime
                EXAMTIME_BUS examTimeBus = new EXAMTIME_BUS();
                EXAMTIME_OBJ examtime = examTimeBus.GetByID(new EXAMTIME_OBJ.BusinessObjectID(examTimeCode));
                int testcount = examtime.TESTCOUNT;
                EXAMFORM_BUS bus = new EXAMFORM_BUS();
                for (int i = 0; i < testcount; i++)
                {
                    // create examform
                    EXAMFORM_OBJ obj = new EXAMFORM_OBJ
                    {
                        EXAMTIMECODE = examTimeCode,
                        SUBJECTCODE = examtime.SUBJECTCODE,
                        TESTSTRUCTCODE = testStructCode,
                        EDITTIME = DateTime.Now,
                        EDITUSER = _ses.loginCode,
                        LOCK = 0,
                        NAME = "New ExamForm"
                    };
                    obj.CODE = bus.genNextCode(obj);
                    obj.CODEVIEW = obj.CODE;
                    code = obj.CODE;
                    obj.LOCKDATE = DateTime.Now;
                    ret = bus.insert(obj);
                    if (ret >= 0)
                        // create examformDetail
                        ret = CreateExamFormDetail(obj.CODE, testStructCode);
                    if (ret < 0)
                        break;
                }
            }

            if (ret >= 0)
                // chia đề thi
                ret = DevideExam(examTimeCode);
            result.Add(ret);
            result.Add(code);
            return result;
        }

        /// <summary>
        /// tạo đề thi cho một đợt thi
        /// </summary>
        /// <param name="examTimeCode"></param>
        /// <param name="testStructCode"></param>
        /// <returns></returns>
        public JsonResult CreateExamFormJson(string examTimeCode, string testStructCode)
        {
            ArrayList result = CreateExamForm(examTimeCode, testStructCode);
            return Json(new { ret = result[0], CODE = result[1] }, JsonRequestBehavior.AllowGet);
            // lấy code trong trường hợp chọn bài cho học là các bài thi, kiểm tra.
            //Trả về code để insert vào bảng subjectcontenttest
        }

        /// <summary>
        /// sinh chi tiết đề thi
        /// </summary>
        /// <param name="examformCode">mã đề thi</param>
        /// <param name="testStructCode"></param>
        /// <returns></returns>
        public int CreateExamFormDetail(string examformCode, string testStructCode)
        {
            int ret = -1;
            Random rnd = new Random();
            // get list TestStructDetail by testStructCode
            var liTestStructDetail = new TestStructDetailController().getDetailByTestStruct(testStructCode);
            foreach (var testStructDetail in liTestStructDetail)
            {
                int amountQues = testStructDetail.AMOUNT; // số câu hỏi
                                                          // double toTalMark = testStructDetail.TOTALMARK; // tổng số điểm
                if (amountQues > 0) // nếu có câu hỏi trong cấu trúc đề thi
                {
                    string subjectContentCode = testStructDetail.SUBJECTCONTENTCODE;
                    int countQues = 0; //tổng số câu hỏi đã lấy được
                                       //   double countMark = 0; // tổng số điểm lấy được
                                       // get ListQuestionGroup by subjectContentCode
                    List<QUESTIONGROUP_OBJ> liQuesGroup = new QuestionController().GetQGroupBySbjContent(subjectContentCode);
                    List<string> selectedQuesGroupCode = new List<string>(); // danh sách nhóm câu hỏi đã được chọn
                    //Random ra câu hỏi,
                    //random được câu nào thì remove câu đó khỏi danh sách ban đầu (ko bị random lại)
                    while (liQuesGroup.Count > 0 && countQues < amountQues)
                    {
                        int r = rnd.Next(0, liQuesGroup.Count);
                        QUESTIONGROUP_OBJ questionGroup = liQuesGroup[r];
                        selectedQuesGroupCode.Add(questionGroup.CODE);
                        liQuesGroup.RemoveAt(r);
                        countQues++;
                    }
                    // insert examformdetail
                    ret = InsertExamFormDetail(examformCode, selectedQuesGroupCode, testStructDetail.CODE);
                }
            }
            return ret;
        }

        /// <summary>
        /// insert chi tiết đề thi vào csdl
        /// </summary>
        /// <param name="examformCode">mã đề thi</param>
        /// <param name="selectedQuesGroupCode">Nhóm câu hỏi</param>
        /// <param name="teststructDetailCode">mã cấu trúc đề thi chi tiết</param>
        /// <returns></returns>
        public int InsertExamFormDetail(string examformCode, List<string> selectedQuesGroupCode, string teststructDetailCode)
        {
            var ret = -1;
            if (selectedQuesGroupCode != null)
            {
                ret = 0;
                EXAMFORMDETAIL_BUS bus = new EXAMFORMDETAIL_BUS();
                EXAMFORMDETAIL_OBJ obj = new EXAMFORMDETAIL_OBJ();
                for (int i = 0; i < selectedQuesGroupCode.Count; i++)
                {
                    obj.EXAMFORMCODE = examformCode;
                    obj.QUESTIONGROUPCODE = selectedQuesGroupCode[i];
                    obj.TESTSTRUCTDETAILCODE = teststructDetailCode;
                    obj.THEORDER = i + 1;
                    obj.CODE = bus.genNextCode(obj);
                    ret = bus.insert(obj);
                    if (ret < 0)
                        return ret;
                }
                bus.CloseConnection();
            }
            return ret;
        }

        /// <summary>
        /// chia đề thi cho sinh viên
        /// </summary>
        /// <param name="examtimeCode"></param>
        public int DevideExam(string examtimeCode)
        {
            int ret = 0;
            if (!string.IsNullOrEmpty(examtimeCode))
            {
                //list examform by examtime
                EXAMFORM_BUS examformBus = new EXAMFORM_BUS();
                var liExamform = examformBus.getAllBy2("CODE", new fieldpara("EXAMTIMECODE", examtimeCode, 0));
                int examformAmount = liExamform.Count; // số đề thi
                                                       // list hall
                EXAMHALL_BUS examhallBus = new EXAMHALL_BUS();
                var liExamHall = examhallBus.getAllBy2("CODE", new fieldpara("EXAMTIMECODE", examtimeCode, 0));
                foreach (var examhall in liExamHall)
                {
                    // danh sách sinh viên của một phòng thi
                    EXAMHALLSTUDENT_BUS examhallstudentBus = new EXAMHALLSTUDENT_BUS();
                    var liExamStd = examhallstudentBus.getAllBy2("CODE", new fieldpara("EXAMHALLCODE", examhall.CODE, 0));

                    for (int j = 0; j < liExamform.Count; j++)
                    {
                        for (int i = 0; i < liExamStd.Count; i++)
                        {
                            if (i % examformAmount == j)
                            {
                                liExamStd[i].EXAMFORMCODE = liExamform[j].CODE;
                                ret = examhallstudentBus.Update(liExamStd[i]);
                                if (ret < 0)
                                    return ret;
                            }
                        }
                    }
                }
            }
            //  return ret;
            return ret;
        }

        public JsonResult CheckCodeViewExit(string code, string codeView)
        {
            int ret;
            EXAMFORM_BUS bus = new EXAMFORM_BUS();
            List<EXAMFORM_OBJ> li = bus.getAllBy2(new fieldpara("CODEVIEW", codeView, 0), new fieldpara("UNIVERSITYCODE", _ses.gUNIVERSITYCODE, 0));
            bus.CloseConnection();
            int count = li.Count;
            if (count == 0) ret = 0;
            else
            {
                if (code != "" && code == li[0].CODE) ret = 0;
                else ret = 1;
            }
            return Json(new { sussess = ret }, JsonRequestBehavior.AllowGet);
        }
    }
}