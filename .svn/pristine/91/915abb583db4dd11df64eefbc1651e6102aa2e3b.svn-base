var ListQGROUP = React.createClass({
    getInitialState: function () {
        return {
            agGrid: { setRowData: null, getDataChange: null, setNextRow: null, setPrevRow: null },
            rowSelect: null,
            columnDefs: [
                { headerName: "Mã câu hỏi trong nhóm", field: "CODEVIEW", width: 100, editable: false }
                ,{ headerName: "Mô tả gợi nhớ câu hỏi", field: "NAME", width: 300, editable: false }
                ,{ headerName: "Hiển thị", field: "LOCK", width: 120, editable: false, type: 'invcheckbox' }
                , { headerName: "Loại câu hỏi", field: "_QUESTIONTYPECODE.CODEVIEW", width: 100, editable: false }
//                ,{ headerName: "Ghi chú", field: "NOTE", width: 400, editable: false }
            ],
            searchstatus: [],
            loaded: null, //Kiểm tra chỉ load dữ liệu lần đầu tiên
            popup: null,//Để lưu đối tượng popup ở đây
            tab: null,
            page : 1,
            currentcode: ''
        };
    },
    componentWillMount: function(){
    },
    componentDidMount: function () {
        this.setState({popup:this.refs[this.props.id + '_Popup']});
    },

    initAgGrid: function (setRowData, getDataChange, setNextRow, setPrevRow, setSelect) {
        var agGrid = {
            setRowData: setRowData,
            getDataChange: getDataChange,
            setNextRow: setNextRow,
            setPrevRow: setPrevRow,
            setSelect: setSelect
        };
        this.setState({ agGrid: agGrid });
    },
    //Thêm bắt buộc so với cái cũ - 
    /**
    *Danh sách các nút lệnh - để tương tác do cha củađối tượng này gọi (xem hàm dùng chung trong _shared/TabHeader.jsx, ButtonList.jsx )
    */
    registerButton: function () {
        //var obj = Object();
        //Đầy đủ nếu nó không thuộc các nhóm mặc định: { ref: 'cmdNew', callback: this.onPrint,title:'Hello',icon:'',tooltip:'Không rõ'}
     var   obj = [{ ref: 'cmdPreview', callback: this.onPreviewClick, title: 'Xem trước', icon: ' fa fa-eye', tooltip: 'Xem trước' },
               { ref: 'cmdAdd', callback: this.onNewClick }
             , { ref: 'cmdPrint', callback: this.onReport }
             , { ref: 'cmdSearch', callback: this.onSearch }
             , { ref: 'cmdEdit', callback: this.onEditClick }
             , { ref: 'cmdDelete', callback: this.onDeleteClick }
             , { ref: 'cmdRefresh', callback: this.Refresh }
        ];
        return obj;
    },
    onActive: function () {
        var subjectcontentcode = this.props.parent.getKeyValue('subjectcontentcode');
        if (this.state.loaded === null || subjectcontentcode !== this.state.currentcode) {
            this.setState({ currentcode: subjectcontentcode });
            this.loadData();
            this.setState({ loaded: true });//Có thể là giá trị khác để kiểm tra
        }

    },
    refreshRowData: function () {
        this.loadData();
    },
    /**
    *Lấy lại toàn bộ dữ liệu 
    */
    Refresh: function () {
        this.loadData(this.state.searchstatus, this.state.rowSelect[0]);
    },
    /**
    *Lấy lại toàn bộ dữ liệu được gọi bởi popup - với đối tượng vào để xử lý phù hợp
    */
    ReloadList: function (obj) {
        //Mặc định theo giá trị tìm kiếm hiện tại, thiết lập theo bản ghi hiện tại
        this.loadData(this.state.searchstatus, obj);

    }
    ,
    /**
    * Cập nhật lại thông tin sau khi gọi xóa dữ liệu thành công
    */
    ReloadListDelete: function () {
        //cập nhật lại danh sách
        this.loadData();//(this.state.currentcode);
    },
    loadData: function () {
        var subjectcode = this.props.parent.getKeyValue('subjectcode');
        var subjectcontentcode = this.props.parent.getKeyValue('subjectcontentcode');
      //  var ret;
        var pageSize = 0;//$('#pageSize').val();
        var page = this.state.page;
        $.ajax({
            url: "/Question/getListQGROUP",
            dataType: 'json',
            data: {
                page: page,
                pageSize: pageSize,
                subjectcontentcode: subjectcontentcode,
                subjectcode: subjectcode
            },
            success: function (data) {
                //ret = data.data;
                //console.log(data.data);
                if (!data.lst) {
                    this.setState({ rowSelect : null });
                }                
                this.state.agGrid.setRowData(data.lst);
                //this.setDisplay(page, pageSize, data);
            }.bind(this),
            error: function (xhr, status, err) {
                console.log(err.toString());
            }
        });
    },
    onNewClick:function() {
        this.state.popup.ClearInput({});
        this.state.popup.Show();
    },
    onEditClick: function () {
        if (this.state.rowSelect.length !== 1) {
            bootbox.alert('Chưa chọn bản ghi hoặc nhiều hơn một bản ghi');
        } else {
            var obj = this.state.rowSelect[0];
            this.state.popup.SetInput(obj);
            this.state.popup.Show();
        }
    },
    handDelete: function(){
        if (!!this.state.rowSelect) {
            var data = [];
            this.state.rowSelect.forEach(function (item) {
                data.push(item.CODE);
            });
            var postData = { code: data };
            $.ajax({
                url: "/Question/DeleteQGROUP",
                type: "POST",
                dataType: "json",
                traditional: true,
                data: postData,
                success: function (data) {
                    if (data.ret >= 0) {
                        this.refreshRowData();
                        log.show("Đã xoá các bản ghi đã chọn?",true);
                    }
                    else
                    {
                        log.show("Xoá không thành công!",false);
                    }

                }.bind(this),
                error: function (xhr, status, err) {
                    console.log(err.toString());
                }
            });
        }
        else{
            log.show("Không có bản ghi nào!",false);
        }
    },
    onDeleteClick: function () {
        var that = this;
        bootbox.confirm({
            message: "Xóa các bản ghi được lựa chọn ?",
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn btn-danger'
                },
                cancel: {
                    label: 'No',
                    className: 'btn btn-default'
                }
            },
            callback: function (result) {
                if (result) {
                    that.handDelete();
                }
                else {
                    console.log("No items have been deleted", true);
                }
            }
        });
    },
    onPreviewClick: function () {
        if (this.state.rowSelect === null)
            bootbox.alert('Chưa chọn bản ghi hoặc nhiều hơn một bản ghi');
        else if (this.state.rowSelect.length !== 1)
            bootbox.alert('Chưa chọn bản ghi hoặc nhiều hơn một bản ghi');
        else {
            var currentcode = this.state.rowSelect[0].CODE;
            window.open('/Question/Preview/' + currentcode, '_blank');
        }

    },
    onReport: function () {
        console.log("onReport");
    },
    onSearch: function () {
        var dataSearch = [
                           { title: 'Mã', id: 'CODESEARCH', type: 'text' }
                           , { title: 'Loại', id: 'TYPECODE', type: 'text' }
        ];
        var obj = this.state.searchstatus;
        //Dữ liệu mặc định
        this.props.parent.ShowSearch(this.props.id + '_search', dataSearch, obj, this.doSearch);
    },
    onSearchSQL: function () {
        console.log("search SQL GRADE");
    },
    /**
     * When select 1 row, what should we show out
     * if there is MS type,WR type and LA type, we will show questioncontent and 
     * @param {} itemSelect 
     * @returns {} 
     */
    onRowSelect: function (itemSelect) {
   
        this.setState({ rowSelect: itemSelect });
        if (itemSelect.length > 0) {
            this.props.parent.setKeyValue('questiongroup', itemSelect[0]);
            this.props.parent.setKeyValue('questiongroupcode', itemSelect[0].CODE);
            this.props.parent.setKeyValue('questiontypecode', itemSelect[0].QUESTIONTYPECODE);
            this.props.parent.setKeyValue('questiontypecodeview', itemSelect[0]._QUESTIONTYPECODE.CODEVIEW);
            this.props.parent.setKeyValue('questiongroupname', itemSelect[0].NAME);
            this.props.parent.setKeyValue('questiongroupcontent', itemSelect[0].CONTENT);

            if (itemSelect[0]._QUESTIONTYPECODE.CODEVIEW === "MS" ||
                itemSelect[0]._QUESTIONTYPECODE.CODEVIEW === "WR" ||
                itemSelect[0]._QUESTIONTYPECODE.CODEVIEW === "LA" 
                ) {
                this.props.parent.Hide('question');
                this.props.parent.UnHide('answer');
            }
            else if (itemSelect[0]._QUESTIONTYPECODE.CODEVIEW === "CO")
            {
                this.props.parent.Hide('answer');
                this.props.parent.UnHide('question');
            }
            else {
                this.props.parent.UnHide('answer');
                this.props.parent.UnHide('question');
            }
        } else {
            this.props.parent.setKeyValue('questiongroupcode', '');
            this.props.parent.setKeyValue('questiontypecode', '');
            this.props.parent.setKeyValue('questiontypecodeview', '');
            this.props.parent.setKeyValue('questiontypecodeview', itemSelect[0]._QUESTIONTYPECODE.CODEVIEW);
            this.props.parent.setKeyValue('questiongroupname', '');
            this.props.parent.setKeyValue('questiongroupcontent', '');
        }
    },
    render: function () {
        return (
            <div id={this.props.id+'_list'} className="tab-pane fade in active">
               <GroupPopup ReloadData={this.ReloadList} 
                           ref ={this.props.id + '_Popup'}
                            id ={this.props.id + '_Popup'} 
                           parent={this.props.parent}/>
                <div id={this.props.id+'_grid'} className="ag-fresh customgrid">
                </div>
                    <AgGrid container={this.props.id+'_grid'}
                            initAgGrid={this.initAgGrid}
                            loadData={this.loadData}
                            onRowSelect={this.onRowSelect}
                            columnDefs={this.state.columnDefs}
                            headerCheckBox={true}>
                    </AgGrid>
            </div>
        );
}
});

